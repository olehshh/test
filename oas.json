{
  "openapi": "3.0.2",
  "info": {
    "title": "Connecteam API documentation",
    "version": "v1"
  },
  
  "servers": [
    {
      "url": "https://api.connecteam.com/"
    }
  ],
  "paths": {
    "/me": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Account details",
        "description": "Returns the info associated with the passed API key",
        "operationId": "get_account_information_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_MeResponse_"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/forms/v1/forms/{formId}": {
      "get": {
        "tags": [
          "Forms:v1:Forms"
        ],
        "summary": "Get a single form",
        "description": "Get a specific form by the formId",
        "operationId": "get_form_forms_v1_forms__formId__get",
        "parameters": [
          {
            "description": "Form id to return",
            "required": true,
            "schema": {
              "title": "Formid",
              "minimum": 1,
              "type": "integer",
              "description": "Form id to return"
            },
            "name": "formId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_FormResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/forms/v1/forms": {
      "get": {
        "tags": [
          "Forms:v1:Forms"
        ],
        "summary": "Get multiple form objects",
        "description": "Get a list of form objects irrelevant to their location within the system",
        "operationId": "get_forms_forms_v1_forms_get",
        "parameters": [
          {
            "description": "The maximum number of results to display per page",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of results to display per page",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0,
              "type": "integer",
              "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseResponse_FormsGetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/forms/v1/forms/{formId}/form-submissions": {
      "get": {
        "tags": [
          "Forms:v1:Form Submissions"
        ],
        "summary": "Get multiple form submissions",
        "description": "Get a list of submissions of a form",
        "operationId": "get_form_submissions_forms_v1_forms__formId__form_submissions_get",
        "parameters": [
          {
            "description": "Form Id",
            "required": true,
            "schema": {
              "title": "Formid",
              "type": "integer",
              "description": "Form Id"
            },
            "name": "formId",
            "in": "path"
          },
          {
            "description": "Filter by submitting user ids",
            "required": false,
            "schema": {
              "title": "Userids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Filter by submitting user ids"
            },
            "name": "userIds",
            "in": "query"
          },
          {
            "description": "Filter form submissions that were submitted from this timestamp",
            "required": false,
            "schema": {
              "title": "Submittingstarttimestamp",
              "type": "integer",
              "description": "Filter form submissions that were submitted from this timestamp"
            },
            "name": "submittingStartTimestamp",
            "in": "query"
          },
          {
            "description": "Filter form submissions that were submitted until this timestamp",
            "required": false,
            "schema": {
              "title": "Submittingendtime",
              "type": "integer",
              "description": "Filter form submissions that were submitted until this timestamp"
            },
            "name": "submittingEndTime",
            "in": "query"
          },
          {
            "description": "The maximum number of results to display per page",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of results to display per page",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0,
              "type": "integer",
              "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseResponse_FormsSubmissionsGetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/forms/v1/forms/{formId}/form-submissions/{formSubmissionId}": {
      "get": {
        "tags": [
          "Forms:v1:Form Submissions"
        ],
        "summary": "Get a single form submission",
        "description": "Retrieve a submission of a form",
        "operationId": "get_form_submission_forms_v1_forms__formId__form_submissions__formSubmissionId__get",
        "parameters": [
          {
            "description": "Form Id",
            "required": true,
            "schema": {
              "title": "Formid",
              "type": "integer",
              "description": "Form Id"
            },
            "name": "formId",
            "in": "path"
          },
          {
            "description": "Filter by Form submission id",
            "required": true,
            "schema": {
              "title": "Formsubmissionid",
              "type": "string",
              "description": "Filter by Form submission id"
            },
            "name": "formSubmissionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_FormsSubmissionGetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Forms:v1:Form Submissions"
        ],
        "summary": "Update a single form submission",
        "description": "Update the submission of a form",
        "operationId": "update_form_submissions_forms_v1_forms__formId__form_submissions__formSubmissionId__put",
        "parameters": [
          {
            "description": "Form Id",
            "required": true,
            "schema": {
              "title": "Formid",
              "type": "integer",
              "description": "Form Id"
            },
            "name": "formId",
            "in": "path"
          },
          {
            "description": "Filter by Form submission id",
            "required": true,
            "schema": {
              "title": "Formsubmissionid",
              "type": "string",
              "description": "Filter by Form submission id"
            },
            "name": "formSubmissionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormSubmissionPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_FormsSubmissionPutResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/v1/schedulers": {
      "get": {
        "tags": [
          "Scheduler:v1:Schedulers"
        ],
        "summary": "Get schedulers",
        "description": "Retrieve a list of schedulers associated with the account",
        "operationId": "get_schedulers_scheduler_v1_schedulers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_SchedulersResponse_"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/v1/schedulers/user-unavailability": {
      "get": {
        "tags": [
          "Scheduler:v1:Schedulers:Unavailabilities"
        ],
        "summary": "Get user unavailabilities",
        "description": "Retrieve a list of user unavailabilities, approved time-off requests and assigned shifts",
        "operationId": "get_unavailabilities_scheduler_v1_schedulers_user_unavailability_get",
        "parameters": [
          {
            "description": "The unique identifier of the user",
            "required": true,
            "schema": {
              "title": "Userid",
              "type": "integer",
              "description": "The unique identifier of the user"
            },
            "name": "userId",
            "in": "query"
          },
          {
            "description": "The start time to filter by in Unix format (in seconds)",
            "required": true,
            "schema": {
              "title": "Starttime",
              "minimum": 1,
              "type": "integer",
              "description": "The start time to filter by in Unix format (in seconds)"
            },
            "name": "startTime",
            "in": "query"
          },
          {
            "description": "The end time to filter by in Unix format (in seconds)",
            "required": true,
            "schema": {
              "title": "Endtime",
              "minimum": 1,
              "type": "integer",
              "description": "The end time to filter by in Unix format (in seconds)"
            },
            "name": "endTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_GetUnavailabilitiesResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/v1/schedulers/{schedulerId}/shifts": {
      "get": {
        "tags": [
          "Scheduler:v1:Schedulers:Scheduler:Shifts"
        ],
        "summary": "Get shifts",
        "description": "Retrieve a list of shifts under a specific scheduler",
        "operationId": "get_shifts_scheduler_v1_schedulers__schedulerId__shifts_get",
        "parameters": [
          {
            "description": "Scheduler instance id",
            "required": true,
            "schema": {
              "title": "Schedulerid",
              "type": "integer",
              "description": "Scheduler instance id"
            },
            "name": "schedulerId",
            "in": "path"
          },
          {
            "description": "The start time to filter by in Unix format (in seconds)",
            "required": true,
            "schema": {
              "title": "Starttime",
              "minimum": 1,
              "type": "integer",
              "description": "The start time to filter by in Unix format (in seconds)"
            },
            "name": "startTime",
            "in": "query"
          },
          {
            "description": "The end time to filter by in Unix format (in seconds)",
            "required": true,
            "schema": {
              "title": "Endtime",
              "minimum": 1,
              "type": "integer",
              "description": "The end time to filter by in Unix format (in seconds)"
            },
            "name": "endTime",
            "in": "query"
          },
          {
            "description": "Filter shifts that are open shifts",
            "required": false,
            "schema": {
              "title": "Isopenshift",
              "type": "boolean",
              "description": "Filter shifts that are open shifts"
            },
            "name": "isOpenShift",
            "in": "query"
          },
          {
            "description": "Filter shifts that are published",
            "required": false,
            "schema": {
              "title": "Ispublished",
              "type": "boolean",
              "description": "Filter shifts that are published"
            },
            "name": "isPublished",
            "in": "query"
          },
          {
            "description": "Filter shifts that require admin approval",
            "required": false,
            "schema": {
              "title": "Isrequireadminapproval",
              "type": "boolean",
              "description": "Filter shifts that require admin approval"
            },
            "name": "isRequireAdminApproval",
            "in": "query"
          },
          {
            "description": "List of job IDs",
            "required": false,
            "schema": {
              "title": "Jobid",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of job IDs"
            },
            "name": "jobId",
            "in": "query"
          },
          {
            "description": "List of user IDs",
            "required": false,
            "schema": {
              "title": "Assigneduserids",
              "type": "array",
              "items": {
                "minimum": 1,
                "type": "integer"
              },
              "description": "List of user IDs"
            },
            "name": "assignedUserIds",
            "in": "query"
          },
          {
            "description": "List of shift IDs",
            "required": false,
            "schema": {
              "title": "Shiftid",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of shift IDs"
            },
            "name": "shiftId",
            "in": "query"
          },
          {
            "description": "Title of the shift",
            "required": false,
            "schema": {
              "title": "Title",
              "type": "string",
              "description": "Title of the shift"
            },
            "name": "title",
            "in": "query"
          },
          {
            "description": "Sort key",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ShiftsSortKeysExternal"
                }
              ],
              "description": "Sort key"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Sort order, set only if sort key is set",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order, set only if sort key is set",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The maximum number of results to display per page",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of results to display per page",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0,
              "type": "integer",
              "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseResponse_ShiftBulkResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Scheduler:v1:Schedulers:Scheduler:Shifts"
        ],
        "summary": "Update shifts",
        "description": "Update single or multiple shifts under a specific scheduler",
        "operationId": "update_shifts_scheduler_v1_schedulers__schedulerId__shifts_put",
        "parameters": [
          {
            "description": "Scheduler instance id",
            "required": true,
            "schema": {
              "title": "Schedulerid",
              "type": "integer",
              "description": "Scheduler instance id"
            },
            "name": "schedulerId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Shifts",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ShiftUpdateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_ShiftBulkResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Scheduler:v1:Schedulers:Scheduler:Shifts"
        ],
        "summary": "Create shifts",
        "description": "Create single or multiple shifts under a specific scheduler",
        "operationId": "create_shifts_scheduler_v1_schedulers__schedulerId__shifts_post",
        "parameters": [
          {
            "description": "Scheduler instance id",
            "required": true,
            "schema": {
              "title": "Schedulerid",
              "type": "integer",
              "description": "Scheduler instance id"
            },
            "name": "schedulerId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Shifts",
                "maxItems": 500,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ShiftCreateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_ShiftBulkResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Scheduler:v1:Schedulers:Scheduler:Shifts"
        ],
        "summary": "Delete shifts",
        "description": "Delete single or multiple shifts in a specified scheduler",
        "operationId": "delete_shifts_by_ids_scheduler_v1_schedulers__schedulerId__shifts_delete",
        "parameters": [
          {
            "description": "Scheduler instance id",
            "required": true,
            "schema": {
              "title": "Schedulerid",
              "type": "integer",
              "description": "Scheduler instance id"
            },
            "name": "schedulerId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShiftBulkDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_ShiftBulkDeleteResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/scheduler/v1/schedulers/{schedulerId}/shifts/{shiftId}": {
      "get": {
        "tags": [
          "Scheduler:v1:Schedulers:Scheduler:Shifts"
        ],
        "summary": "Get shift by shift id",
        "description": "Get shift by id in scheduler",
        "operationId": "get_shift_by_id_scheduler_v1_schedulers__schedulerId__shifts__shiftId__get",
        "parameters": [
          {
            "description": "The unique identifier of the shift",
            "required": true,
            "schema": {
              "title": "Shiftid",
              "type": "string",
              "description": "The unique identifier of the shift"
            },
            "name": "shiftId",
            "in": "path"
          },
          {
            "description": "Scheduler instance id",
            "required": true,
            "schema": {
              "title": "Schedulerid",
              "type": "integer",
              "description": "Scheduler instance id"
            },
            "name": "schedulerId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_ShiftResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Scheduler:v1:Schedulers:Scheduler:Shifts"
        ],
        "summary": "Delete a single shift",
        "description": "Delete shift by id in scheduler",
        "operationId": "delete_shift_by_id_scheduler_v1_schedulers__schedulerId__shifts__shiftId__delete",
        "parameters": [
          {
            "description": "The ID of the shift to delete",
            "required": true,
            "schema": {
              "title": "Shiftid",
              "type": "string",
              "description": "The ID of the shift to delete"
            },
            "name": "shiftId",
            "in": "path"
          },
          {
            "description": "Scheduler instance id",
            "required": true,
            "schema": {
              "title": "Schedulerid",
              "type": "integer",
              "description": "Scheduler instance id"
            },
            "name": "schedulerId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_ShiftDeleteResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/jobs/v1/jobs": {
      "get": {
        "tags": [
          "Jobs:v1:Jobs"
        ],
        "summary": "Get jobs",
        "description": "Get a list of job objects relevant to instance id (scheduler id or time clock id).\nIf unified jobs are disabled, only schedulers are supported",
        "operationId": "get_jobs_jobs_v1_jobs_get",
        "parameters": [
          {
            "description": "List of instance IDs (scheduler id or time clock id) to filter by",
            "required": false,
            "schema": {
              "title": "Instanceids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "List of instance IDs (scheduler id or time clock id) to filter by"
            },
            "name": "instanceIds",
            "in": "query"
          },
          {
            "description": "List of job IDs to filter by",
            "required": false,
            "schema": {
              "title": "Jobids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of job IDs to filter by"
            },
            "name": "jobIds",
            "in": "query"
          },
          {
            "description": "List of job names to filter by",
            "required": false,
            "schema": {
              "title": "Jobnames",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of job names to filter by"
            },
            "name": "jobNames",
            "in": "query"
          },
          {
            "description": "Determines whether the response includes jobs that have been deleted. Default value is set to true.",
            "required": false,
            "schema": {
              "title": "Includedeleted",
              "type": "boolean",
              "description": "Determines whether the response includes jobs that have been deleted. Default value is set to true.",
              "default": true
            },
            "name": "includeDeleted",
            "in": "query"
          },
          {
            "description": "Sort key",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/JobsSortKeysExternal"
                }
              ],
              "description": "Sort key"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Sort order, set only if sort key is set",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order, set only if sort key is set",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The maximum number of results to display per page",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of results to display per page",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0,
              "type": "integer",
              "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseResponse_JobsResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Jobs:v1:Jobs"
        ],
        "summary": "Create jobs",
        "description": "Create individual or multiple jobs under a specified scheduler",
        "operationId": "create_jobs_jobs_v1_jobs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Jobs",
                "maxItems": 500,
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/JobCreateRequest"
                    },
                    {
                      "$ref": "#/components/schemas/SubJobCreateRequest"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_JobsResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/jobs/v1/jobs/{jobId}": {
      "get": {
        "tags": [
          "Jobs:v1:Job"
        ],
        "summary": "Get a single job",
        "description": "Retrieve a single job information by its unique ID",
        "operationId": "get_job_jobs_v1_jobs__jobId__get",
        "parameters": [
          {
            "description": "The unique identifier of the job",
            "required": true,
            "schema": {
              "title": "Jobid",
              "type": "string",
              "description": "The unique identifier of the job"
            },
            "name": "jobId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_JobResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/users/v1/users": {
      "get": {
        "tags": [
          "Users:v1:Users"
        ],
        "summary": "Get users",
        "description": "Retrieves a list of all users associated with the account. Optionally, filter by user ID to receive specific user information",
        "operationId": "get_users_users_v1_users_get",
        "parameters": [
          {
            "description": "The maximum number of results to display per page",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of results to display per page",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0,
              "type": "integer",
              "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Sort key",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UsersSortKeysExternal"
                }
              ],
              "description": "Sort key"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Sort order, set only if sort key is set",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order, set only if sort key is set",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "List of user IDs for filtering.",
            "required": false,
            "schema": {
              "title": "Userids",
              "type": "array",
              "items": {
                "minimum": 1,
                "type": "integer"
              },
              "description": "List of user IDs for filtering."
            },
            "name": "userIds",
            "in": "query"
          },
          {
            "description": "Filter users by status. Default is active.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UserStatus"
                }
              ],
              "description": "Filter users by status. Default is active.",
              "default": "active"
            },
            "name": "userStatus",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseResponse_UsersResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users:v1:Users"
        ],
        "summary": "Update users",
        "description": "Update individual or multiple users associated with the account using the provided details. You can specify updates either by their phone number or unique userID.",
        "operationId": "edit_users_users_v1_users_put",
        "parameters": [
          {
            "description": "Optional flag to edit users by phone (default by user id).",
            "required": false,
            "schema": {
              "title": "Editusersbyphone",
              "type": "boolean",
              "description": "Optional flag to edit users by phone (default by user id).",
              "default": false
            },
            "name": "editUsersByPhone",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Users",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserEditRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_EditUsersResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users:v1:Users"
        ],
        "summary": "Create users",
        "description": "Create individual or multiple users associated with the account using the provided details.",
        "operationId": "create_users_users_v1_users_post",
        "parameters": [
          {
            "description": "Optional flag to send activation sms.",
            "required": false,
            "schema": {
              "title": "Sendactivation",
              "type": "boolean",
              "description": "Optional flag to send activation sms.",
              "default": false
            },
            "name": "sendActivation",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Users",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_CreateUsersResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users:v1:Users"
        ],
        "summary": "Archive users",
        "description": "Archive individual or multiple users associated with the account by their unique userID.",
        "operationId": "archive_users_users_v1_users_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Userids",
                "type": "array",
                "items": {
                  "minimum": 1,
                  "type": "integer"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_ArchiveUsersResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/users/v1/custom-fields": {
      "get": {
        "tags": [
          "Users:v1:Custom Fields"
        ],
        "summary": "Get custom fields",
        "description": "Retrieves all custom fields associated with the account. Optionally, filter the results by categories, names, types, or custom field IDs.",
        "operationId": "get_custom_fields_users_v1_custom_fields_get",
        "parameters": [
          {
            "description": "Custom field ids to filter by",
            "required": false,
            "schema": {
              "title": "Customfieldids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Custom field ids to filter by"
            },
            "name": "customFieldIds",
            "in": "query"
          },
          {
            "description": "Custom field category ids to filter by",
            "required": false,
            "schema": {
              "title": "Categoryids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Custom field category ids to filter by"
            },
            "name": "categoryIds",
            "in": "query"
          },
          {
            "description": "Custom field types to filter by",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserCustomFields"
              },
              "description": "Custom field types to filter by"
            },
            "name": "customFieldTypes",
            "in": "query"
          },
          {
            "description": "Custom field names to filter by",
            "required": false,
            "schema": {
              "title": "Customfieldnames",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Custom field names to filter by"
            },
            "name": "customFieldNames",
            "in": "query"
          },
          {
            "description": "The maximum number of results to display per page",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of results to display per page",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0,
              "type": "integer",
              "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Sort key",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CustomFieldsSortExternal"
                }
              ],
              "description": "Sort key"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Sort order, set only if sort key is set",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order, set only if sort key is set",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseResponse_GetCustomFieldsSettingsResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users:v1:Custom Fields"
        ],
        "summary": "Update custom fields",
        "description": "Update custom fields settings by their unique ID",
        "operationId": "update_custom_fields_users_v1_custom_fields_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_custom_fields_users_v1_custom_fields_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_GetCustomFieldsSettingsResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users:v1:Custom Fields"
        ],
        "summary": "Create custom fields",
        "description": "Create individual or multiple custom fields associated with the account under a specific category.",
        "operationId": "create_custom_fields_users_v1_custom_fields_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_custom_fields_users_v1_custom_fields_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_GetCustomFieldsSettingsResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users:v1:Custom Fields"
        ],
        "summary": "Delete custom fields",
        "description": "Delete individual or multiple custom fields associated with the account by their unique ID.",
        "operationId": "delete_custom_fields_users_v1_custom_fields_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_delete_custom_fields_users_v1_custom_fields_delete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_BulkDeleteCustomFieldResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/users/v1/custom-field-categories": {
      "get": {
        "tags": [
          "Users:v1:Custom Field Categories"
        ],
        "summary": "Get custom field categories",
        "description": "Retrieves all custom fields categories associated with the account. Optionally, filter the results by category IDs and/or names.",
        "operationId": "get_custom_fields_users_v1_custom_field_categories_get",
        "parameters": [
          {
            "description": "The maximum number of results to display per page",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of results to display per page",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0,
              "type": "integer",
              "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "Custom field category ids to filter by",
            "required": false,
            "schema": {
              "title": "Categoryids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Custom field category ids to filter by"
            },
            "name": "categoryIds",
            "in": "query"
          },
          {
            "description": "Custom field category names to filter by",
            "required": false,
            "schema": {
              "title": "Categorynames",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Custom field category names to filter by"
            },
            "name": "categoryNames",
            "in": "query"
          },
          {
            "description": "Sort key",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CustomFieldCategoriesSortExternal"
                }
              ],
              "description": "Sort key"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Sort order, set only if sort key is set",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order, set only if sort key is set",
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseResponse_CustomFieldCategoriesResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/time-off/v1/policy-types": {
      "get": {
        "tags": [
          "TimeOff:v1:PolicyTypes"
        ],
        "summary": "Get list of policy types",
        "description": "Get list of policy types",
        "operationId": "get_policy_groups_time_off_v1_policy_types_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_TimeOffGetPolicyTypesResponse_"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/time-off/v1/policy-types/{policyTypeId}/balances": {
      "get": {
        "tags": [
          "TimeOff:v1:Balances"
        ],
        "summary": "Get list of user balances within a policy type",
        "description": "Get list of user balances by policy type id",
        "operationId": "get_balances_time_off_v1_policy_types__policyTypeId__balances_get",
        "parameters": [
          {
            "description": "Policy type id",
            "required": true,
            "schema": {
              "title": "Policytypeid",
              "type": "string",
              "description": "Policy type id"
            },
            "name": "policyTypeId",
            "in": "path"
          },
          {
            "description": "List of user ids",
            "required": false,
            "schema": {
              "title": "Userids",
              "type": "array",
              "items": {
                "minimum": 1,
                "type": "integer"
              },
              "description": "List of user ids"
            },
            "name": "userIds",
            "in": "query"
          },
          {
            "description": "The maximum number of results to display per page",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of results to display per page",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0,
              "type": "integer",
              "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBaseResponse_TimeOffGetUserBalancesResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/time-off/v1/policy-types/{policyTypeId}/balances/{userId}": {
      "put": {
        "tags": [
          "TimeOff:v1:Balances"
        ],
        "summary": "Update user's balance within a policy type",
        "description": "Update user's balance by policy type id and user id",
        "operationId": "put_user_balance_time_off_v1_policy_types__policyTypeId__balances__userId__put",
        "parameters": [
          {
            "description": "Policy type id",
            "required": true,
            "schema": {
              "title": "Policytypeid",
              "type": "string",
              "description": "Policy type id"
            },
            "name": "policyTypeId",
            "in": "path"
          },
          {
            "description": "The ID of the user to update balance",
            "required": true,
            "schema": {
              "title": "Userid",
              "minimum": 1,
              "type": "integer",
              "description": "The ID of the user to update balance"
            },
            "name": "userId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Request",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeOffUpdateUserBalanceRequest"
                  }
                ],
                "description": "The balance to update to"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_TimeOffPutUserBalanceResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/time-clock/v1/time-clocks": {
      "get": {
        "tags": [
          "TimeClock:v1:TimeClocks"
        ],
        "summary": "Get time clocks",
        "description": "Retrieve a list of time clocks associated with the account",
        "operationId": "get_time_clocks_time_clock_v1_time_clocks_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_TimeClocksResponse_"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/time-clock/v1/time-clocks/{timeClockId}/time-activities": {
      "get": {
        "tags": [
          "TimeClock:v1:TimeClocks:TimeClock:TimeActivities"
        ],
        "summary": "Get time activities",
        "description": "Retrieve a list of time activities in under a specified time clock.\nTime activities include shift and/or manual breaks",
        "operationId": "get_time_activities_time_clock_v1_time_clocks__timeClockId__time_activities_get",
        "parameters": [
          {
            "description": "The unique identifier of the time clock",
            "required": true,
            "schema": {
              "title": "Timeclockid",
              "type": "integer",
              "description": "The unique identifier of the time clock"
            },
            "name": "timeClockId",
            "in": "path"
          },
          {
            "description": "The start time to filter by in ISO 8601 format (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "title": "Startdate",
              "type": "string",
              "description": "The start time to filter by in ISO 8601 format (YYYY-MM-DD)"
            },
            "name": "startDate",
            "in": "query"
          },
          {
            "description": "The end time to filter by in ISO 8601 format (YYYY-MM-DD)",
            "required": true,
            "schema": {
              "title": "Enddate",
              "type": "string",
              "description": "The end time to filter by in ISO 8601 format (YYYY-MM-DD)"
            },
            "name": "endDate",
            "in": "query"
          },
          {
            "description": "Filter time activities by a list of user IDs",
            "required": false,
            "schema": {
              "title": "Userids",
              "type": "array",
              "items": {
                "minimum": 1,
                "type": "integer"
              },
              "description": "Filter time activities by a list of user IDs"
            },
            "name": "userIds",
            "in": "query"
          },
          {
            "description": "The job IDs of shifts",
            "required": false,
            "schema": {
              "title": "Jobids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The job IDs of shifts"
            },
            "name": "jobIds",
            "in": "query"
          },
          {
            "description": "The manual break IDs of manual breaks",
            "required": false,
            "schema": {
              "title": "Manualbreakids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The manual break IDs of manual breaks"
            },
            "name": "manualBreakIds",
            "in": "query"
          },
          {
            "description": "The policy type IDs of time offs",
            "required": false,
            "schema": {
              "title": "Policytypeids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The policy type IDs of time offs"
            },
            "name": "policyTypeIds",
            "in": "query"
          },
          {
            "description": "The time activity types: shift, manual_break or time_off",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TimeActivityAPIType"
              },
              "description": "The time activity types: shift, manual_break or time_off"
            },
            "name": "activityTypes",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_TimeActivitiesGetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "put": {
        "tags": [
          "TimeClock:v1:TimeClocks:TimeClock:TimeActivities"
        ],
        "summary": "Update time activities",
        "description": "Update time activities for users assigned to a specific time clock. Time activities can include adjustments to shifts and/or manual breaks.",
        "operationId": "update_time_activities_time_clock_v1_time_clocks__timeClockId__time_activities_put",
        "parameters": [
          {
            "description": "The unique identifier of the time clock",
            "required": true,
            "schema": {
              "title": "Timeclockid",
              "type": "integer",
              "description": "The unique identifier of the time clock"
            },
            "name": "timeClockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeActivitiesUpdateRequestList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_TimeActivitiesUpdateResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": [
          "TimeClock:v1:TimeClocks:TimeClock:TimeActivities"
        ],
        "summary": "Create time activities",
        "description": "Create multiple time activities in a time clock",
        "operationId": "create_time_activities_time_clock_v1_time_clocks__timeClockId__time_activities_post",
        "parameters": [
          {
            "description": "The unique identifier of the time clock",
            "required": true,
            "schema": {
              "title": "Timeclockid",
              "type": "integer",
              "description": "The unique identifier of the time clock"
            },
            "name": "timeClockId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeActivitiesCreateRequestList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_TimeActivitiesCreateResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/time-clock/v1/time-clocks/{timeClockId}/shift-attachments": {
      "get": {
        "tags": [
          "TimeClock:v1:TimeClocks:TimeClock:ShiftAttachments"
        ],
        "summary": "Get shift attachments",
        "description": "Get shift attachments of a time clock",
        "operationId": "get_shift_attachments_time_clock_v1_time_clocks__timeClockId__shift_attachments_get",
        "parameters": [
          {
            "description": "The unique identifier of the time clock",
            "required": true,
            "schema": {
              "title": "Timeclockid",
              "type": "integer",
              "description": "The unique identifier of the time clock"
            },
            "name": "timeClockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_ShiftAttachmentsGetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/time-clock/v1/time-clocks/{timeClockId}/manual-breaks": {
      "get": {
        "tags": [
          "TimeClock:v1:TimeClocks:TimeClock:ManualBreaks"
        ],
        "summary": "Get manual breaks",
        "description": "Get multiple manual breaks of a time clock",
        "operationId": "get_manual_breaks_time_clock_v1_time_clocks__timeClockId__manual_breaks_get",
        "parameters": [
          {
            "description": "The unique identifier of the time clock",
            "required": true,
            "schema": {
              "title": "Timeclockid",
              "type": "integer",
              "description": "The unique identifier of the time clock"
            },
            "name": "timeClockId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse_ManualBreaksGetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "APIResponse_ArchiveUsersResponse_": {
        "title": "APIResponse[ArchiveUsersResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ArchiveUsersResponse"
          }
        }
      },
      "APIResponse_BulkDeleteCustomFieldResponse_": {
        "title": "APIResponse[BulkDeleteCustomFieldResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/BulkDeleteCustomFieldResponse"
          }
        }
      },
      "APIResponse_CreateUsersResponse_": {
        "title": "APIResponse[CreateUsersResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/CreateUsersResponse"
          }
        }
      },
      "APIResponse_EditUsersResponse_": {
        "title": "APIResponse[EditUsersResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/EditUsersResponse"
          }
        }
      },
      "APIResponse_FormResponse_": {
        "title": "APIResponse[FormResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FormResponse"
          }
        }
      },
      "APIResponse_FormsSubmissionGetResponse_": {
        "title": "APIResponse[FormsSubmissionGetResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FormsSubmissionGetResponse"
          }
        }
      },
      "APIResponse_FormsSubmissionPutResponse_": {
        "title": "APIResponse[FormsSubmissionPutResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FormsSubmissionPutResponse"
          }
        }
      },
      "APIResponse_GetCustomFieldsSettingsResponse_": {
        "title": "APIResponse[GetCustomFieldsSettingsResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/GetCustomFieldsSettingsResponse"
          }
        }
      },
      "APIResponse_GetUnavailabilitiesResponse_": {
        "title": "APIResponse[GetUnavailabilitiesResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/GetUnavailabilitiesResponse"
          }
        }
      },
      "APIResponse_JobResponse_": {
        "title": "APIResponse[JobResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/JobResponse"
          }
        }
      },
      "APIResponse_JobsResponse_": {
        "title": "APIResponse[JobsResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/JobsResponse"
          }
        }
      },
      "APIResponse_ManualBreaksGetResponse_": {
        "title": "APIResponse[ManualBreaksGetResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ManualBreaksGetResponse"
          }
        }
      },
      "APIResponse_MeResponse_": {
        "title": "APIResponse[MeResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/MeResponse"
          }
        }
      },
      "APIResponse_SchedulersResponse_": {
        "title": "APIResponse[SchedulersResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/SchedulersResponse"
          }
        }
      },
      "APIResponse_ShiftAttachmentsGetResponse_": {
        "title": "APIResponse[ShiftAttachmentsGetResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ShiftAttachmentsGetResponse"
          }
        }
      },
      "APIResponse_ShiftBulkDeleteResponse_": {
        "title": "APIResponse[ShiftBulkDeleteResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ShiftBulkDeleteResponse"
          }
        }
      },
      "APIResponse_ShiftBulkResponse_": {
        "title": "APIResponse[ShiftBulkResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ShiftBulkResponse"
          }
        }
      },
      "APIResponse_ShiftDeleteResponse_": {
        "title": "APIResponse[ShiftDeleteResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ShiftDeleteResponse"
          }
        }
      },
      "APIResponse_ShiftResponse_": {
        "title": "APIResponse[ShiftResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ShiftResponse"
          }
        }
      },
      "APIResponse_TimeActivitiesCreateResponse_": {
        "title": "APIResponse[TimeActivitiesCreateResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/TimeActivitiesCreateResponse"
          }
        }
      },
      "APIResponse_TimeActivitiesGetResponse_": {
        "title": "APIResponse[TimeActivitiesGetResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/TimeActivitiesGetResponse"
          }
        }
      },
      "APIResponse_TimeActivitiesUpdateResponse_": {
        "title": "APIResponse[TimeActivitiesUpdateResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/TimeActivitiesUpdateResponse"
          }
        }
      },
      "APIResponse_TimeClocksResponse_": {
        "title": "APIResponse[TimeClocksResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/TimeClocksResponse"
          }
        }
      },
      "APIResponse_TimeOffGetPolicyTypesResponse_": {
        "title": "APIResponse[TimeOffGetPolicyTypesResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/TimeOffGetPolicyTypesResponse"
          }
        }
      },
      "APIResponse_TimeOffPutUserBalanceResponse_": {
        "title": "APIResponse[TimeOffPutUserBalanceResponse]",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/TimeOffPutUserBalanceResponse"
          }
        }
      },
      "AbsenceType": {
        "title": "AbsenceType",
        "enum": [
          "unavailability",
          "timeOff"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ActivityFileResponse": {
        "title": "ActivityFileResponse",
        "required": [
          "fileName",
          "fileUrl"
        ],
        "type": "object",
        "properties": {
          "fileName": {
            "title": "Filename",
            "type": "string",
            "description": "The name of the file in a shift attachment of type file"
          },
          "fileUrl": {
            "title": "Fileurl",
            "type": "string",
            "description": "The URL of the file in a shift attachment of type file"
          }
        }
      },
      "AlbumNoteDataOut": {
        "title": "AlbumNoteDataOut",
        "required": [
          "album"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Album note type",
            "default": "album"
          },
          "album": {
            "title": "Album",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageNoteDataOut"
            },
            "description": "The list of images in the album"
          }
        }
      },
      "ArchiveUsersResponse": {
        "title": "ArchiveUsersResponse",
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "success": {
            "title": "Success",
            "type": "boolean",
            "description": "Whether the users were deleted successfully."
          }
        }
      },
      "AssignDataApi": {
        "title": "AssignDataApi",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AssignDataTypes"
          },
          "userIds": {
            "title": "Userids",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The user ids to assign to this entity (if assigning type is users).",
            "default": []
          },
          "groupIds": {
            "title": "Groupids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The group ids to assign to this entity (if assigning type is groups).",
            "default": []
          }
        }
      },
      "AssignDataIn": {
        "title": "AssignDataIn",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AssignDataTypes"
          },
          "userIds": {
            "title": "Userids",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The user ids to assign to this entity (if assigning type is users).",
            "default": []
          },
          "groupIds": {
            "title": "Groupids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The group ids to assign to this entity (if assigning type is groups).",
            "default": []
          }
        }
      },
      "AssignDataTypes": {
        "title": "AssignDataTypes",
        "enum": [
          "users",
          "groups",
          "both"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AudioAnswer": {
        "title": "AudioAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "audioRecording"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "audioRecording"
          },
          "audioUrl": {
            "title": "Audiourl",
            "type": "string",
            "description": "The audio url."
          },
          "audioLength": {
            "title": "Audiolength",
            "type": "integer",
            "description": "The audio length in seconds."
          }
        }
      },
      "AudioRecordingQuestion": {
        "title": "AudioRecordingQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "audioRecording"
            ],
            "type": "string",
            "description": "The type of the question"
          }
        }
      },
      "BaseCustomField": {
        "title": "BaseCustomField",
        "required": [
          "customFieldId",
          "value"
        ],
        "type": "object",
        "properties": {
          "customFieldId": {
            "title": "Customfieldid",
            "minimum": 1,
            "type": "integer",
            "description": "The custom field unique id"
          },
          "value": {
            "title": "Value",
            "description": "The value of the custom field. Our real-time API documentation experience does not support custom fields of the dropdown type.To update dropdown fields value(s), pass an array of objects with the IDs of the selected dropdown values (e.g., [{id: 1}, {id: 2}])."
          }
        }
      },
      "BaseJobResponse": {
        "title": "BaseJobResponse",
        "required": [
          "jobId",
          "title",
          "code",
          "color",
          "description",
          "assign"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "title": "Jobid",
            "type": "string",
            "description": "The job ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The title of the Job"
          },
          "code": {
            "title": "Code",
            "type": "string",
            "description": "The code of the Job."
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The color associated with the job"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The job description"
          },
          "gps": {
            "title": "Gps",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "GPS data associated with the job"
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "Indicates whether the job is deleted or not",
            "default": false
          },
          "assign": {
            "title": "Assign",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssignDataApi"
              }
            ],
            "description": "Data related to job assignment"
          },
          "useParentData": {
            "title": "Useparentdata",
            "type": "boolean",
            "description": "Indicates whether to use the parent job's data or not"
          },
          "parentId": {
            "title": "Parentid",
            "type": "string",
            "description": "The ID of the parent job, if any"
          },
          "subJobs": {
            "title": "Subjobs",
            "type": "array",
            "description": "The sub jobs of the parent job, if any"
          }
        }
      },
      "Body_create_custom_fields_users_v1_custom_fields_post": {
        "title": "Body_create_custom_fields_users_v1_custom_fields_post",
        "required": [
          "customFields"
        ],
        "type": "object",
        "properties": {
          "customFields": {
            "title": "Customfields",
            "maxItems": 100,
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DropdownCustomFieldCreateRequest"
                },
                {
                  "$ref": "#/components/schemas/CustomFieldCreateRequest"
                }
              ]
            },
            "description": "The custom fields."
          }
        }
      },
      "Body_delete_custom_fields_users_v1_custom_fields_delete": {
        "title": "Body_delete_custom_fields_users_v1_custom_fields_delete",
        "required": [
          "customFieldIds"
        ],
        "type": "object",
        "properties": {
          "customFieldIds": {
            "title": "Customfieldids",
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The custom fields IDs to delete"
          }
        }
      },
      "Body_update_custom_fields_users_v1_custom_fields_put": {
        "title": "Body_update_custom_fields_users_v1_custom_fields_put",
        "required": [
          "customFields"
        ],
        "type": "object",
        "properties": {
          "customFields": {
            "title": "Customfields",
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBulkEditRequest"
            },
            "description": "The custom fields."
          }
        }
      },
      "BulkDeleteCustomFieldResponse": {
        "title": "BulkDeleteCustomFieldResponse",
        "required": [
          "customFieldIds",
          "success"
        ],
        "type": "object",
        "properties": {
          "customFieldIds": {
            "title": "Customfieldids",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The deleted custom fields ids"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "description": "Whether the custom field were deleted successfully."
          }
        }
      },
      "CreateDropdownCustomFieldOption": {
        "title": "CreateDropdownCustomFieldOption",
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "title": "Value",
            "type": "string",
            "description": "The name of this option"
          }
        }
      },
      "CreateUsersResponse": {
        "title": "CreateUsersResponse",
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The created users."
          }
        }
      },
      "CustomFieldBulkEditRequest": {
        "title": "CustomFieldBulkEditRequest",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer",
            "description": "The custom fields id"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the custom field"
          },
          "isRequired": {
            "title": "Isrequired",
            "type": "boolean",
            "description": "Indicates whether the custom field is required"
          },
          "categoryId": {
            "title": "Categoryid",
            "type": "integer",
            "description": "The unique identifier of the custom field category"
          },
          "isVisibleToAllAdmins": {
            "title": "Isvisibletoalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to all admins"
          },
          "viewAccessAdminIds": {
            "title": "Viewaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to view this custom field, owners can always see all custom fields.\nApplicable only to custom fields that are not visible to all admins."
          },
          "isEditableForAllAdmins": {
            "title": "Iseditableforalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by all admins"
          },
          "editAccessAdminIds": {
            "title": "Editaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to edit this custom field, owners can always edit all custom fields.\nApplicable only to custom fields that are not editable by all admins."
          },
          "isVisibleToUsers": {
            "title": "Isvisibletousers",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to users"
          },
          "isEditableForUsers": {
            "title": "Iseditableforusers",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by users.\nApplicable only to custom fields that are visible to users."
          },
          "isMultiSelect": {
            "title": "Ismultiselect",
            "type": "boolean",
            "description": "Indicates whether multiple selections are allowed in the dropdown.\nApplicable only to custom fields configured as dropdown types."
          },
          "dropdownOptions": {
            "title": "Dropdownoptions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EditDropdownCustomFieldOption"
            },
            "description": "The options available for selection in the dropdown field.\nApplicable only to custom fields configured as dropdown types."
          }
        }
      },
      "CustomFieldCategoriesResponse": {
        "title": "CustomFieldCategoriesResponse",
        "required": [
          "categories"
        ],
        "type": "object",
        "properties": {
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldCategory"
            },
            "description": "The custom fields categories"
          }
        }
      },
      "CustomFieldCategoriesSortExternal": {
        "title": "CustomFieldCategoriesSortExternal",
        "enum": [
          "id",
          "name"
        ],
        "description": "An enumeration."
      },
      "CustomFieldCategory": {
        "title": "CustomFieldCategory",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer",
            "description": "The category's id"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The category's name"
          }
        }
      },
      "CustomFieldCreateRequest": {
        "title": "CustomFieldCreateRequest",
        "required": [
          "name",
          "isRequired",
          "categoryId",
          "isVisibleToAllAdmins",
          "isEditableForAllAdmins",
          "isVisibleToUsers",
          "isEditableForUsers",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the custom field"
          },
          "isRequired": {
            "title": "Isrequired",
            "type": "boolean",
            "description": "Indicates whether the custom field is required"
          },
          "categoryId": {
            "title": "Categoryid",
            "type": "integer",
            "description": "The unique identifier of the custom field category"
          },
          "isVisibleToAllAdmins": {
            "title": "Isvisibletoalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to all admins"
          },
          "viewAccessAdminIds": {
            "title": "Viewaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to view this custom field, owners can always see all custom fields.\nApplicable only to custom fields that are not visible to all admins."
          },
          "isEditableForAllAdmins": {
            "title": "Iseditableforalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by all admins"
          },
          "editAccessAdminIds": {
            "title": "Editaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to edit this custom field, owners can always edit all custom fields.\nApplicable only to custom fields that are not editable by all admins."
          },
          "isVisibleToUsers": {
            "title": "Isvisibletousers",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to users"
          },
          "isEditableForUsers": {
            "title": "Iseditableforusers",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by users.\nApplicable only to custom fields that are visible to users."
          },
          "type": {
            "title": "Type",
            "enum": [
              "email",
              "date",
              "phone",
              "number",
              "str",
              "file",
              "directManager",
              "birthday"
            ],
            "type": "string",
            "description": "The type of the custom field: Email, Date, Number, Text, Phone number, File."
          }
        }
      },
      "CustomFieldResponse": {
        "title": "CustomFieldResponse",
        "required": [
          "customFieldId",
          "value",
          "type",
          "name"
        ],
        "type": "object",
        "properties": {
          "customFieldId": {
            "title": "Customfieldid",
            "minimum": 1,
            "type": "integer",
            "description": "The custom field unique id"
          },
          "value": {
            "title": "Value",
            "description": "The value of the custom field. Our real-time API documentation experience does not support custom fields of the dropdown type.To update dropdown fields value(s), pass an array of objects with the IDs of the selected dropdown values (e.g., [{id: 1}, {id: 2}])."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCustomFields"
              }
            ],
            "description": "The custom field type"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The custom field name"
          }
        }
      },
      "CustomFieldSettingsResponse": {
        "title": "CustomFieldSettingsResponse",
        "required": [
          "name",
          "isRequired",
          "categoryId",
          "isVisibleToAllAdmins",
          "isEditableForAllAdmins",
          "isVisibleToUsers",
          "isEditableForUsers",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer",
            "description": "The custom fields id"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the custom field"
          },
          "isRequired": {
            "title": "Isrequired",
            "type": "boolean",
            "description": "Indicates whether the custom field is required"
          },
          "categoryId": {
            "title": "Categoryid",
            "type": "integer",
            "description": "The unique identifier of the custom field category"
          },
          "isVisibleToAllAdmins": {
            "title": "Isvisibletoalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to all admins"
          },
          "viewAccessAdminIds": {
            "title": "Viewaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to view this custom field, owners can always see all custom fields.\nApplicable only to custom fields that are not visible to all admins."
          },
          "isEditableForAllAdmins": {
            "title": "Iseditableforalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by all admins"
          },
          "editAccessAdminIds": {
            "title": "Editaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to edit this custom field, owners can always edit all custom fields.\nApplicable only to custom fields that are not editable by all admins."
          },
          "isVisibleToUsers": {
            "title": "Isvisibletousers",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to users"
          },
          "isEditableForUsers": {
            "title": "Iseditableforusers",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by users.\nApplicable only to custom fields that are visible to users."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserCustomFields"
              }
            ],
            "description": "The type of the custom field: Email, Date, Number, Text, Phone number, Dropdown, File."
          }
        }
      },
      "CustomFieldsSortExternal": {
        "title": "CustomFieldsSortExternal",
        "enum": [
          "id",
          "name",
          "type"
        ],
        "description": "An enumeration."
      },
      "DateManagerField": {
        "title": "DateManagerField",
        "required": [
          "managerFieldId",
          "name",
          "mobileUsersCanSee",
          "mobileUsersNotifyWhenChanges",
          "adminsWhoCanEdit",
          "managerFieldType"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The Manager Field's ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The Manager Field's name"
          },
          "mobileUsersCanSee": {
            "title": "Mobileuserscansee",
            "type": "boolean",
            "description": "Indication if mobile users can see the Manager Field"
          },
          "mobileUsersNotifyWhenChanges": {
            "title": "Mobileusersnotifywhenchanges",
            "type": "boolean",
            "description": "Indication if mobile users will be notified if the Manager Field changes"
          },
          "adminsWhoCanEdit": {
            "title": "Adminswhocanedit",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitAdminsWhoCanEdit"
              }
            ],
            "description": " Limit the admins who can edit this manager field. Owners can always edit the manager field."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "date"
            ],
            "type": "string",
            "description": "The Manager Field's type"
          }
        }
      },
      "DateQuestion": {
        "title": "DateQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "isDateActive",
          "isTimeActive"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "datetime"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "isDateActive": {
            "title": "Isdateactive",
            "type": "boolean",
            "description": "Indication if selecting a date is enabled"
          },
          "isTimeActive": {
            "title": "Istimeactive",
            "type": "boolean",
            "description": "Indication if selecting a time is enabled"
          }
        }
      },
      "DateTimeAnswer": {
        "title": "DateTimeAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty",
          "isTimeSubmitted",
          "isDateSubmitted"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "datetime"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "datetime"
          },
          "timestamp": {
            "title": "Timestamp",
            "type": "integer",
            "description": "The timestamp of the answer."
          },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "The timezone of the answer."
          },
          "isTimeSubmitted": {
            "title": "Istimesubmitted",
            "type": "boolean",
            "description": "Whether the time was submitted."
          },
          "isDateSubmitted": {
            "title": "Isdatesubmitted",
            "type": "boolean",
            "description": "Whether the date was submitted."
          }
        }
      },
      "DescriptionAnswer": {
        "title": "DescriptionAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "description"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "description"
          }
        }
      },
      "DescriptionQuestion": {
        "title": "DescriptionQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "description"
            ],
            "type": "string",
            "description": "The type of the question"
          }
        }
      },
      "DropdownCustomFieldCreateRequest": {
        "title": "DropdownCustomFieldCreateRequest",
        "required": [
          "name",
          "isRequired",
          "categoryId",
          "isVisibleToAllAdmins",
          "isEditableForAllAdmins",
          "isVisibleToUsers",
          "isEditableForUsers",
          "isMultiSelect"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the custom field"
          },
          "isRequired": {
            "title": "Isrequired",
            "type": "boolean",
            "description": "Indicates whether the custom field is required"
          },
          "categoryId": {
            "title": "Categoryid",
            "type": "integer",
            "description": "The unique identifier of the custom field category"
          },
          "isVisibleToAllAdmins": {
            "title": "Isvisibletoalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to all admins"
          },
          "viewAccessAdminIds": {
            "title": "Viewaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to view this custom field, owners can always see all custom fields.\nApplicable only to custom fields that are not visible to all admins."
          },
          "isEditableForAllAdmins": {
            "title": "Iseditableforalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by all admins"
          },
          "editAccessAdminIds": {
            "title": "Editaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to edit this custom field, owners can always edit all custom fields.\nApplicable only to custom fields that are not editable by all admins."
          },
          "isVisibleToUsers": {
            "title": "Isvisibletousers",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to users"
          },
          "isEditableForUsers": {
            "title": "Iseditableforusers",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by users.\nApplicable only to custom fields that are visible to users."
          },
          "isMultiSelect": {
            "title": "Ismultiselect",
            "type": "boolean",
            "description": "Indicates whether multiple selections are allowed in the dropdown.\nApplicable only to custom fields configured as dropdown types."
          },
          "dropdownOptions": {
            "title": "Dropdownoptions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateDropdownCustomFieldOption"
            },
            "description": "The options available for selection in the dropdown field.\nApplicable only to custom fields configured as dropdown types."
          },
          "type": {
            "title": "Type",
            "enum": [
              "dropdown"
            ],
            "type": "string",
            "description": "The type of the custom field: Dropdown",
            "default": "dropdown"
          }
        }
      },
      "DropdownCustomFieldOption": {
        "title": "DropdownCustomFieldOption",
        "required": [
          "id",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer",
            "description": "The id of this option"
          },
          "value": {
            "title": "Value",
            "type": "string",
            "description": "The name of this option"
          },
          "isDisabled": {
            "title": "Isdisabled",
            "type": "boolean",
            "description": "Indicates if this option is disabled",
            "default": false
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "Indicates if this option is deleted\n(this will still be returned in case someone already chose this option so you can see the value).",
            "default": false
          }
        }
      },
      "DropdownCustomFieldSettingsResponse": {
        "title": "DropdownCustomFieldSettingsResponse",
        "required": [
          "name",
          "isRequired",
          "categoryId",
          "isVisibleToAllAdmins",
          "isEditableForAllAdmins",
          "isVisibleToUsers",
          "isEditableForUsers",
          "isMultiSelect",
          "dropdownOptions",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer",
            "description": "The custom fields id"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the custom field"
          },
          "isRequired": {
            "title": "Isrequired",
            "type": "boolean",
            "description": "Indicates whether the custom field is required"
          },
          "categoryId": {
            "title": "Categoryid",
            "type": "integer",
            "description": "The unique identifier of the custom field category"
          },
          "isVisibleToAllAdmins": {
            "title": "Isvisibletoalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to all admins"
          },
          "viewAccessAdminIds": {
            "title": "Viewaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to view this custom field, owners can always see all custom fields.\nApplicable only to custom fields that are not visible to all admins."
          },
          "isEditableForAllAdmins": {
            "title": "Iseditableforalladmins",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by all admins"
          },
          "editAccessAdminIds": {
            "title": "Editaccessadminids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "A list of unique identifiers of the admins who will be granted access to edit this custom field, owners can always edit all custom fields.\nApplicable only to custom fields that are not editable by all admins."
          },
          "isVisibleToUsers": {
            "title": "Isvisibletousers",
            "type": "boolean",
            "description": "Indicates whether the custom field is visible to users"
          },
          "isEditableForUsers": {
            "title": "Iseditableforusers",
            "type": "boolean",
            "description": "Indicates whether the custom field is editable by users.\nApplicable only to custom fields that are visible to users."
          },
          "isMultiSelect": {
            "title": "Ismultiselect",
            "type": "boolean",
            "description": "Indicates whether multiple selections are allowed in the dropdown.\nApplicable only to custom fields configured as dropdown types."
          },
          "dropdownOptions": {
            "title": "Dropdownoptions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DropdownCustomFieldOption"
            },
            "description": "The options available for selection in the dropdown field.\nApplicable only to custom fields configured as dropdown types."
          },
          "type": {
            "title": "Type",
            "enum": [
              "dropdown"
            ],
            "type": "string",
            "description": "The type of the custom field: Email, Date, Number, Text, Phone number, Dropdown, File.",
            "default": "dropdown"
          }
        }
      },
      "EditDropdownCustomFieldOption": {
        "title": "EditDropdownCustomFieldOption",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer",
            "description": "The id of this option"
          },
          "value": {
            "title": "Value",
            "type": "string",
            "description": "The name of this option"
          },
          "isDisabled": {
            "title": "Isdisabled",
            "type": "boolean",
            "description": "Indicates if this option is disabled",
            "default": false
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "Indicates if this option is deleted\n(this will still be returned in case someone already chose this option so you can see the value).",
            "default": false
          }
        }
      },
      "EditUsersResponse": {
        "title": "EditUsersResponse",
        "required": [
          "count",
          "users"
        ],
        "type": "object",
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer",
            "description": "The number of users edited."
          },
          "users": {
            "title": "Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The edited users."
          }
        }
      },
      "FileManagerField": {
        "title": "FileManagerField",
        "required": [
          "managerFieldId",
          "name",
          "mobileUsersCanSee",
          "mobileUsersNotifyWhenChanges",
          "adminsWhoCanEdit",
          "managerFieldType"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The Manager Field's ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The Manager Field's name"
          },
          "mobileUsersCanSee": {
            "title": "Mobileuserscansee",
            "type": "boolean",
            "description": "Indication if mobile users can see the Manager Field"
          },
          "mobileUsersNotifyWhenChanges": {
            "title": "Mobileusersnotifywhenchanges",
            "type": "boolean",
            "description": "Indication if mobile users will be notified if the Manager Field changes"
          },
          "adminsWhoCanEdit": {
            "title": "Adminswhocanedit",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitAdminsWhoCanEdit"
              }
            ],
            "description": " Limit the admins who can edit this manager field. Owners can always edit the manager field."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "file"
            ],
            "type": "string",
            "description": "The Manager Field's type"
          }
        }
      },
      "FileNoteDataOut": {
        "title": "FileNoteDataOut",
        "required": [
          "url",
          "name"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string",
            "description": "The url of the file to upload"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "URL note type",
            "default": "file"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the file"
          }
        }
      },
      "FileQuestion": {
        "title": "FileQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "isMultipleFileUploadAllowed"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "files"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "isMultipleFileUploadAllowed": {
            "title": "Ismultiplefileuploadallowed",
            "type": "boolean",
            "description": "Indicates if multiple file uploads is enabled"
          }
        }
      },
      "FilesAnswer": {
        "title": "FilesAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty",
          "files"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "files"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "files"
          },
          "files": {
            "title": "Files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormFileModel"
            },
            "description": "The files."
          }
        }
      },
      "FormFileModel": {
        "title": "FormFileModel",
        "required": [
          "url",
          "size",
          "fileName"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string",
            "description": "The URL of the file."
          },
          "size": {
            "title": "Size",
            "type": "integer",
            "description": "The size of the file in bytes."
          },
          "fileName": {
            "title": "Filename",
            "type": "string",
            "description": "The name of the file."
          }
        }
      },
      "FormImageModel": {
        "title": "FormImageModel",
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string",
            "description": "The URL of the image."
          }
        }
      },
      "FormImageSelectionModel": {
        "title": "FormImageSelectionModel",
        "required": [
          "imageSelectionId",
          "text",
          "image"
        ],
        "type": "object",
        "properties": {
          "imageSelectionId": {
            "title": "Imageselectionid",
            "type": "string",
            "description": "The ID of the image selection."
          },
          "text": {
            "title": "Text",
            "type": "string",
            "description": "The text of the image selection."
          },
          "image": {
            "title": "Image",
            "type": "string",
            "description": "The URL of the image."
          }
        }
      },
      "FormMultipleChoiceOptionModel": {
        "title": "FormMultipleChoiceOptionModel",
        "required": [
          "multipleChoiceOptionId",
          "text"
        ],
        "type": "object",
        "properties": {
          "multipleChoiceOptionId": {
            "title": "Multiplechoiceoptionid",
            "type": "string",
            "description": "The ID of the multiple choice option"
          },
          "text": {
            "title": "Text",
            "type": "string",
            "description": "The text of the option"
          }
        }
      },
      "FormResponse": {
        "title": "FormResponse",
        "required": [
          "formId",
          "formName",
          "createdAt",
          "lastUpdatedAt",
          "questions",
          "settings"
        ],
        "type": "object",
        "properties": {
          "formId": {
            "title": "Formid",
            "type": "integer",
            "description": "The Form's ID"
          },
          "formName": {
            "title": "Formname",
            "type": "string",
            "description": "The Form's title"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "integer",
            "description": "Form's creation timestamp"
          },
          "lastUpdatedAt": {
            "title": "Lastupdatedat",
            "type": "integer",
            "description": "The Form's last update timestamp"
          },
          "questions": {
            "title": "Questions",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DescriptionQuestion"
                },
                {
                  "$ref": "#/components/schemas/MultipleChoiceQuestion"
                },
                {
                  "$ref": "#/components/schemas/NumberQuestion"
                },
                {
                  "$ref": "#/components/schemas/OpenEndedQuestion"
                },
                {
                  "$ref": "#/components/schemas/YesNoQuestion"
                },
                {
                  "$ref": "#/components/schemas/ImageSelectionQuestion"
                },
                {
                  "$ref": "#/components/schemas/ImageQuestion"
                },
                {
                  "$ref": "#/components/schemas/ScannerQuestion"
                },
                {
                  "$ref": "#/components/schemas/LocationQuestion"
                },
                {
                  "$ref": "#/components/schemas/AudioRecordingQuestion"
                },
                {
                  "$ref": "#/components/schemas/TaskQuestion"
                },
                {
                  "$ref": "#/components/schemas/DateQuestion"
                },
                {
                  "$ref": "#/components/schemas/RatingQuestion"
                },
                {
                  "$ref": "#/components/schemas/SignatureQuestion"
                },
                {
                  "$ref": "#/components/schemas/FileQuestion"
                },
                {
                  "$ref": "#/components/schemas/SliderQuestion"
                }
              ],
              "discriminator": {
                "propertyName": "questionType",
                "mapping": {
                  "description": "#/components/schemas/DescriptionQuestion",
                  "multipleChoice": "#/components/schemas/MultipleChoiceQuestion",
                  "number": "#/components/schemas/NumberQuestion",
                  "openEnded": "#/components/schemas/OpenEndedQuestion",
                  "yesNo": "#/components/schemas/YesNoQuestion",
                  "imageSelection": "#/components/schemas/ImageSelectionQuestion",
                  "image": "#/components/schemas/ImageQuestion",
                  "scanDocument": "#/components/schemas/ScannerQuestion",
                  "location": "#/components/schemas/LocationQuestion",
                  "audioRecording": "#/components/schemas/AudioRecordingQuestion",
                  "task": "#/components/schemas/TaskQuestion",
                  "datetime": "#/components/schemas/DateQuestion",
                  "rating": "#/components/schemas/RatingQuestion",
                  "signature": "#/components/schemas/SignatureQuestion",
                  "files": "#/components/schemas/FileQuestion",
                  "slider": "#/components/schemas/SliderQuestion"
                }
              }
            },
            "description": "List of the Form's questions"
          },
          "settings": {
            "title": "Settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/FormSettings"
              }
            ],
            "description": "The Form's settings"
          }
        }
      },
      "FormSettings": {
        "title": "FormSettings",
        "required": [
          "enableUsersToDownloadPdf",
          "limitTotalEntries",
          "limitEntriesPerUser",
          "limitEntriesUntilTimestamp",
          "isAnonymous",
          "managerFields"
        ],
        "type": "object",
        "properties": {
          "enableUsersToDownloadPdf": {
            "title": "Enableuserstodownloadpdf",
            "type": "boolean",
            "description": "Indication if users can download a PDF of the entry"
          },
          "limitTotalEntries": {
            "title": "Limittotalentries",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitTotalEntries"
              }
            ],
            "description": "The settings for the total number of entries limit"
          },
          "limitEntriesPerUser": {
            "title": "Limitentriesperuser",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitEntriesPerUser"
              }
            ],
            "description": "The settings for the total number of entries per user limit"
          },
          "limitEntriesUntilTimestamp": {
            "title": "Limitentriesuntiltimestamp",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitEntriesUntilTimestamp"
              }
            ],
            "description": "The settings for time limit indicating until when entries can be submitted"
          },
          "isAnonymous": {
            "title": "Isanonymous",
            "type": "boolean",
            "description": "Indication if the form submissions are anonymous"
          },
          "managerFields": {
            "title": "Managerfields",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileManagerField"
                },
                {
                  "$ref": "#/components/schemas/SignatureManagerField"
                },
                {
                  "$ref": "#/components/schemas/DateManagerField"
                },
                {
                  "$ref": "#/components/schemas/OwnerManagerField"
                },
                {
                  "$ref": "#/components/schemas/NoteManagerField"
                },
                {
                  "$ref": "#/components/schemas/StatusManagerField"
                }
              ],
              "discriminator": {
                "propertyName": "managerFieldType",
                "mapping": {
                  "file": "#/components/schemas/FileManagerField",
                  "signature": "#/components/schemas/SignatureManagerField",
                  "date": "#/components/schemas/DateManagerField",
                  "owner": "#/components/schemas/OwnerManagerField",
                  "note": "#/components/schemas/NoteManagerField",
                  "status": "#/components/schemas/StatusManagerField"
                }
              }
            },
            "description": "List of manager fields in the form"
          }
        }
      },
      "FormSubmissionPutRequest": {
        "title": "FormSubmissionPutRequest",
        "required": [
          "managerFields"
        ],
        "type": "object",
        "properties": {
          "managerFields": {
            "title": "Managerfields",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagerFieldFileRequest"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldDateRequest"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldSignatureRequest"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldOwnerRequest"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldStatusRequest"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldNoteRequest"
                }
              ],
              "discriminator": {
                "propertyName": "managerFieldType",
                "mapping": {
                  "file": "#/components/schemas/ManagerFieldFileRequest",
                  "date": "#/components/schemas/ManagerFieldDateRequest",
                  "signature": "#/components/schemas/ManagerFieldSignatureRequest",
                  "owner": "#/components/schemas/ManagerFieldOwnerRequest",
                  "status": "#/components/schemas/ManagerFieldStatusRequest",
                  "note": "#/components/schemas/ManagerFieldNoteRequest"
                }
              }
            },
            "description": "The manager fields to update"
          }
        }
      },
      "FormSubmissionResponse": {
        "title": "FormSubmissionResponse",
        "required": [
          "formSubmissionId",
          "formId",
          "submissionTimestamp",
          "submissionTimezone",
          "entryNum",
          "submittingUserId",
          "isAnonymous",
          "managerFields",
          "answers"
        ],
        "type": "object",
        "properties": {
          "formSubmissionId": {
            "title": "Formsubmissionid",
            "type": "string",
            "description": "The form submission id."
          },
          "formId": {
            "title": "Formid",
            "type": "integer",
            "description": "The forms id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "submissionTimezone": {
            "title": "Submissiontimezone",
            "type": "string",
            "description": "The timezone of the submission."
          },
          "entryNum": {
            "title": "Entrynum",
            "type": "integer",
            "description": "The entry number."
          },
          "submittingUserId": {
            "title": "Submittinguserid",
            "type": "integer",
            "description": "The user id of the submitting user."
          },
          "isAnonymous": {
            "title": "Isanonymous",
            "type": "boolean",
            "description": "Whether the submission is anonymous."
          },
          "managerFields": {
            "title": "Managerfields",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagerFieldDate"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldFile"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldSignature"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldOwner"
                },
                {
                  "$ref": "#/components/schemas/v2__features__workflow__external_api__v1__form_submissions__models__response__form_submission_response_model__ManagerFieldStatus"
                },
                {
                  "$ref": "#/components/schemas/ManagerFieldNote"
                }
              ],
              "discriminator": {
                "propertyName": "managerFieldType",
                "mapping": {
                  "date": "#/components/schemas/ManagerFieldDate",
                  "file": "#/components/schemas/ManagerFieldFile",
                  "signature": "#/components/schemas/ManagerFieldSignature",
                  "owner": "#/components/schemas/ManagerFieldOwner",
                  "status": "#/components/schemas/v2__features__workflow__external_api__v1__form_submissions__models__response__form_submission_response_model__ManagerFieldStatus",
                  "note": "#/components/schemas/ManagerFieldNote"
                }
              }
            },
            "description": "The manager fields."
          },
          "answers": {
            "title": "Answers",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DescriptionAnswer"
                },
                {
                  "$ref": "#/components/schemas/MultipleChoiceAnswer"
                },
                {
                  "$ref": "#/components/schemas/NumberAnswer"
                },
                {
                  "$ref": "#/components/schemas/OpenEndedAnswer"
                },
                {
                  "$ref": "#/components/schemas/YesNoAnswer"
                },
                {
                  "$ref": "#/components/schemas/ScannerAnswer"
                },
                {
                  "$ref": "#/components/schemas/ImageSelectionAnswer"
                },
                {
                  "$ref": "#/components/schemas/LocationAnswer"
                },
                {
                  "$ref": "#/components/schemas/AudioAnswer"
                },
                {
                  "$ref": "#/components/schemas/TaskAnswer"
                },
                {
                  "$ref": "#/components/schemas/DateTimeAnswer"
                },
                {
                  "$ref": "#/components/schemas/RatingAnswer"
                },
                {
                  "$ref": "#/components/schemas/ImageAnswer"
                },
                {
                  "$ref": "#/components/schemas/SignatureAnswer"
                },
                {
                  "$ref": "#/components/schemas/FilesAnswer"
                },
                {
                  "$ref": "#/components/schemas/SliderAnswer"
                }
              ],
              "discriminator": {
                "propertyName": "questionType",
                "mapping": {
                  "description": "#/components/schemas/DescriptionAnswer",
                  "multipleChoice": "#/components/schemas/MultipleChoiceAnswer",
                  "number": "#/components/schemas/NumberAnswer",
                  "openEnded": "#/components/schemas/OpenEndedAnswer",
                  "yesNo": "#/components/schemas/YesNoAnswer",
                  "scanDocument": "#/components/schemas/ScannerAnswer",
                  "imageSelection": "#/components/schemas/ImageSelectionAnswer",
                  "location": "#/components/schemas/LocationAnswer",
                  "audioRecording": "#/components/schemas/AudioAnswer",
                  "task": "#/components/schemas/TaskAnswer",
                  "datetime": "#/components/schemas/DateTimeAnswer",
                  "rating": "#/components/schemas/RatingAnswer",
                  "image": "#/components/schemas/ImageAnswer",
                  "signature": "#/components/schemas/SignatureAnswer",
                  "files": "#/components/schemas/FilesAnswer",
                  "slider": "#/components/schemas/SliderAnswer"
                }
              }
            },
            "description": "The answers."
          }
        }
      },
      "FormYesNoOptionModel": {
        "title": "FormYesNoOptionModel",
        "required": [
          "yesNoOptionId",
          "text"
        ],
        "type": "object",
        "properties": {
          "yesNoOptionId": {
            "title": "Yesnooptionid",
            "type": "integer",
            "description": "The answer option ID"
          },
          "text": {
            "title": "Text",
            "type": "string",
            "description": "The answer text"
          }
        }
      },
      "FormsGetResponse": {
        "title": "FormsGetResponse",
        "required": [
          "forms"
        ],
        "type": "object",
        "properties": {
          "forms": {
            "title": "Forms",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormResponse"
            },
            "description": "List of company's forms"
          }
        }
      },
      "FormsSubmissionGetResponse": {
        "title": "FormsSubmissionGetResponse",
        "required": [
          "formSubmission"
        ],
        "type": "object",
        "properties": {
          "formSubmission": {
            "title": "Formsubmission",
            "allOf": [
              {
                "$ref": "#/components/schemas/FormSubmissionResponse"
              }
            ],
            "description": "The form submission."
          }
        }
      },
      "FormsSubmissionPutResponse": {
        "title": "FormsSubmissionPutResponse",
        "required": [
          "formSubmission"
        ],
        "type": "object",
        "properties": {
          "formSubmission": {
            "title": "Formsubmission",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormSubmissionResponse"
            },
            "description": "A list of form submissions."
          }
        }
      },
      "FormsSubmissionsGetResponse": {
        "title": "FormsSubmissionsGetResponse",
        "required": [
          "formSubmissions"
        ],
        "type": "object",
        "properties": {
          "formSubmissions": {
            "title": "Formsubmissions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormSubmissionResponse"
            },
            "description": "A list of form submissions."
          }
        }
      },
      "FromImageSelectionOptionModel": {
        "title": "FromImageSelectionOptionModel",
        "required": [
          "imageSelectionOptionId",
          "text",
          "image",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "imageSelectionOptionId": {
            "title": "Imageselectionoptionid",
            "type": "string",
            "description": "The answer selection option ID"
          },
          "text": {
            "title": "Text",
            "type": "string",
            "description": "The option text"
          },
          "image": {
            "title": "Image",
            "type": "string",
            "description": "The URL to the image"
          },
          "isDeleted": {
            "title": "Isdeleted",
            "type": "boolean",
            "description": "Indication if this option is deleted"
          }
        }
      },
      "GeneralActivityShiftAttachmentResponse": {
        "title": "GeneralActivityShiftAttachmentResponse",
        "required": [
          "shiftAttachmentId",
          "attachment"
        ],
        "type": "object",
        "properties": {
          "shiftAttachmentId": {
            "title": "Shiftattachmentid",
            "type": "string",
            "description": "The ID of the shift attachment"
          },
          "attachment": {
            "title": "Attachment",
            "allOf": [
              {
                "$ref": "#/components/schemas/GeneralActivityShiftAttachmentValueResponse"
              }
            ],
            "description": "The value of the shift attachment"
          }
        }
      },
      "GeneralActivityShiftAttachmentValueResponse": {
        "title": "GeneralActivityShiftAttachmentValueResponse",
        "type": "object",
        "properties": {
          "itemId": {
            "title": "Itemid",
            "type": "string",
            "description": "The ID of the dropdown list item"
          },
          "freeText": {
            "title": "Freetext",
            "type": "string",
            "description": "The value of the shift attachment of type free text"
          },
          "number": {
            "title": "Number",
            "type": "number",
            "description": "The value of the shift attachment of type number"
          },
          "fileName": {
            "title": "Filename",
            "type": "string",
            "description": "The name of the file in a shift attachment of type file"
          },
          "fileUrl": {
            "title": "Fileurl",
            "type": "string",
            "description": "The URL of the file in a shift attachment of type file"
          },
          "files": {
            "title": "Files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityFileResponse"
            },
            "description": "The value of the shift attachment of type files"
          },
          "images": {
            "title": "Images",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The value of the shift attachment of type images"
          },
          "image": {
            "title": "Image",
            "type": "string",
            "description": "The value of the shift attachment of type signature"
          }
        }
      },
      "GetCustomFieldsSettingsResponse": {
        "title": "GetCustomFieldsSettingsResponse",
        "required": [
          "customFields"
        ],
        "type": "object",
        "properties": {
          "customFields": {
            "title": "Customfields",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DropdownCustomFieldSettingsResponse"
                },
                {
                  "$ref": "#/components/schemas/CustomFieldSettingsResponse"
                }
              ]
            },
            "description": "The custom fields."
          }
        }
      },
      "GetUnavailabilitiesResponse": {
        "title": "GetUnavailabilitiesResponse",
        "required": [
          "userUnavailabilities"
        ],
        "type": "object",
        "properties": {
          "userUnavailabilities": {
            "title": "Userunavailabilities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserUnavailabilityItem"
            },
            "description": "List of users with unavailabilities"
          }
        }
      },
      "GpsData": {
        "title": "GpsData",
        "type": "object",
        "properties": {
          "address": {
            "title": "Address",
            "type": "string",
            "description": "The address associated with the GPS data."
          },
          "longitude": {
            "title": "Longitude",
            "type": "number",
            "description": "The longitude coordinate."
          },
          "latitude": {
            "title": "Latitude",
            "type": "number",
            "description": "The latitude coordinate."
          }
        }
      },
      "HTMLNoteData": {
        "title": "HTMLNoteData",
        "required": [
          "html"
        ],
        "type": "object",
        "properties": {
          "html": {
            "title": "Html",
            "type": "string",
            "description": "The HTML content of the note"
          }
        }
      },
      "HTMLNoteDataOut": {
        "title": "HTMLNoteDataOut",
        "required": [
          "html"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "HTML note type",
            "default": "html"
          },
          "html": {
            "title": "Html",
            "type": "string",
            "description": "The HTML content of the note"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ImageAnswer": {
        "title": "ImageAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty",
          "images"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "image"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "image"
          },
          "images": {
            "title": "Images",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormImageModel"
            },
            "description": "The images."
          }
        }
      },
      "ImageNoteDataOut": {
        "title": "ImageNoteDataOut",
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string",
            "description": "The url of the file to upload"
          }
        }
      },
      "ImageQuestion": {
        "title": "ImageQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "isMultipleImageUploadAllowed",
          "isCameraEnabled",
          "isGalleryEnabled"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "image"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "isMultipleImageUploadAllowed": {
            "title": "Ismultipleimageuploadallowed",
            "type": "boolean",
            "description": "Indicates if multiple uploads is enabled"
          },
          "isCameraEnabled": {
            "title": "Iscameraenabled",
            "type": "boolean",
            "description": "Indicates if taking a picture through camera is enabled"
          },
          "isGalleryEnabled": {
            "title": "Isgalleryenabled",
            "type": "boolean",
            "description": "Indicates if choosing a picture through gallery is enabled"
          }
        }
      },
      "ImageSelectionAnswer": {
        "title": "ImageSelectionAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty",
          "selectedAnswers"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "imageSelection"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "imageSelection"
          },
          "selectedAnswers": {
            "title": "Selectedanswers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormImageSelectionModel"
            },
            "description": "The selected answers."
          }
        }
      },
      "ImageSelectionQuestion": {
        "title": "ImageSelectionQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "isMultipleSelection",
          "options"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "imageSelection"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "isMultipleSelection": {
            "title": "Ismultipleselection",
            "type": "boolean",
            "description": "Indication if multiple selection is enabled"
          },
          "options": {
            "title": "Options",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FromImageSelectionOptionModel"
            },
            "description": "List of image selection options"
          }
        }
      },
      "JobCreateRequest": {
        "title": "JobCreateRequest",
        "required": [
          "title",
          "instanceIds"
        ],
        "type": "object",
        "properties": {
          "instanceIds": {
            "title": "Instanceids",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of Scheduler IDs to assign the job to"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The title of the job"
          },
          "code": {
            "title": "Code",
            "type": "string",
            "description": "The code of the job",
            "default": ""
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The description of the job",
            "default": ""
          },
          "gps": {
            "title": "Gps",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The GPS data of the job"
          },
          "assign": {
            "title": "Assign",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssignDataIn"
              }
            ],
            "description": "Settings related to job assignment"
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The color associated with the job",
            "default": "#2D2D2D"
          },
          "subJobs": {
            "title": "Subjobs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubJobCreateRequest"
            },
            "description": "List of sub jobs to create",
            "default": []
          }
        }
      },
      "JobResponse": {
        "title": "JobResponse",
        "required": [
          "job"
        ],
        "type": "object",
        "properties": {
          "job": {
            "title": "Job",
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseJobResponse"
              }
            ],
            "description": "The job"
          }
        }
      },
      "JobsResponse": {
        "title": "JobsResponse",
        "required": [
          "jobs"
        ],
        "type": "object",
        "properties": {
          "jobs": {
            "title": "Jobs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseJobResponse"
            },
            "description": "The jobs"
          }
        }
      },
      "JobsSortKeysExternal": {
        "title": "JobsSortKeysExternal",
        "enum": [
          "title"
        ],
        "description": "An enumeration."
      },
      "LimitAdminsWhoCanEdit": {
        "title": "LimitAdminsWhoCanEdit",
        "required": [
          "enabled",
          "directManagerPermitted",
          "specificUsersEnabled",
          "adminsWhoCanEdit"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean",
            "description": "Indication if the limit of which admins can edit the Manager Field is enabled"
          },
          "directManagerPermitted": {
            "title": "Directmanagerpermitted",
            "type": "boolean",
            "description": "Indication if the direct manager of the user who submitted the form can edit the manager field"
          },
          "specificUsersEnabled": {
            "title": "Specificusersenabled",
            "type": "boolean",
            "description": "Indication if there are specific admins permitted to edit the manager field"
          },
          "adminsWhoCanEdit": {
            "title": "Adminswhocanedit",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of user IDs of admins that can change this Manager Field"
          }
        }
      },
      "LimitEntriesPerUser": {
        "title": "LimitEntriesPerUser",
        "required": [
          "enabled",
          "limitEntriesPerUser"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean",
            "description": "Is total number of entries per user limit enabled"
          },
          "limitEntriesPerUser": {
            "title": "Limitentriesperuser",
            "type": "integer",
            "description": "The amount of entries that can be submitted per user"
          }
        }
      },
      "LimitEntriesUntilTimestamp": {
        "title": "LimitEntriesUntilTimestamp",
        "required": [
          "enabled",
          "limitEntriesUntilTimestamp"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean",
            "description": "Is time limit until when entries can be submitted enabled"
          },
          "limitEntriesUntilTimestamp": {
            "title": "Limitentriesuntiltimestamp",
            "type": "integer",
            "description": "The time limit indicating until when entries can be submitted"
          }
        }
      },
      "LimitTotalEntries": {
        "title": "LimitTotalEntries",
        "required": [
          "enabled",
          "limitTotalEntries"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean",
            "description": "Is total number of entries limit enabled"
          },
          "limitTotalEntries": {
            "title": "Limittotalentries",
            "type": "integer",
            "description": "The amount of entries that can be submitted"
          }
        }
      },
      "LocationAnswer": {
        "title": "LocationAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "location"
          },
          "locationInput": {
            "title": "Locationinput",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location input."
          }
        }
      },
      "LocationDataAPI": {
        "title": "LocationDataAPI",
        "required": [
          "isReferencedToJob"
        ],
        "type": "object",
        "properties": {
          "isReferencedToJob": {
            "title": "Isreferencedtojob",
            "type": "boolean",
            "description": "Indicates whether the location is referenced to a job. can only be true if job id isn't empty"
          },
          "gps": {
            "title": "Gps",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "GPS data associated with the location."
          }
        }
      },
      "LocationQuestion": {
        "title": "LocationQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "canSearchLocation"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "canSearchLocation": {
            "title": "Cansearchlocation",
            "type": "boolean",
            "description": "Indication if location search is enabled"
          }
        }
      },
      "ManagerFieldDate": {
        "title": "ManagerFieldDate",
        "required": [
          "managerFieldId"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "date"
            ],
            "type": "string",
            "description": "The field type",
            "default": "date"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "description": "The date filled in the field."
          }
        }
      },
      "ManagerFieldDateRequest": {
        "title": "ManagerFieldDateRequest",
        "required": [
          "managerFieldId",
          "date"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id"
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "date"
            ],
            "type": "string",
            "description": "The manager field type",
            "default": "date"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "description": "The date"
          }
        }
      },
      "ManagerFieldFile": {
        "title": "ManagerFieldFile",
        "required": [
          "managerFieldId"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "file"
            ],
            "type": "string",
            "description": "The field type",
            "default": "file"
          },
          "files": {
            "title": "Files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManagerFieldFileModel"
            },
            "description": "The files."
          }
        }
      },
      "ManagerFieldFileModel": {
        "title": "ManagerFieldFileModel",
        "required": [
          "fileUrl",
          "filename"
        ],
        "type": "object",
        "properties": {
          "fileUrl": {
            "title": "Fileurl",
            "type": "string",
            "description": "The URL of the file."
          },
          "filename": {
            "title": "Filename",
            "type": "string",
            "description": "The name of the file."
          }
        }
      },
      "ManagerFieldFileRequest": {
        "title": "ManagerFieldFileRequest",
        "required": [
          "managerFieldId",
          "files"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id"
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "file"
            ],
            "type": "string",
            "description": "The manager field type",
            "default": "file"
          },
          "files": {
            "title": "Files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManagerFieldFileModel"
            },
            "description": "The files"
          }
        }
      },
      "ManagerFieldNote": {
        "title": "ManagerFieldNote",
        "required": [
          "managerFieldId"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "note"
            ],
            "type": "string",
            "description": "The field type",
            "default": "note"
          },
          "note": {
            "title": "Note",
            "type": "string",
            "description": "The note filled in the field."
          }
        }
      },
      "ManagerFieldNoteRequest": {
        "title": "ManagerFieldNoteRequest",
        "required": [
          "managerFieldId",
          "note"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id"
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "note"
            ],
            "type": "string",
            "description": "The manager field type",
            "default": "note"
          },
          "note": {
            "title": "Note",
            "type": "string",
            "description": "The note"
          }
        }
      },
      "ManagerFieldOwner": {
        "title": "ManagerFieldOwner",
        "required": [
          "managerFieldId"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "owner"
            ],
            "type": "string",
            "description": "The field type",
            "default": "owner"
          },
          "userId": {
            "title": "Userid",
            "type": "integer",
            "description": "The user id of the assigned owner."
          }
        }
      },
      "ManagerFieldOwnerRequest": {
        "title": "ManagerFieldOwnerRequest",
        "required": [
          "managerFieldId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id"
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "owner"
            ],
            "type": "string",
            "description": "The manager field type",
            "default": "owner"
          },
          "userId": {
            "title": "Userid",
            "minimum": 1,
            "type": "integer",
            "description": "The user id that is the value of the manager field"
          }
        }
      },
      "ManagerFieldSignature": {
        "title": "ManagerFieldSignature",
        "required": [
          "managerFieldId"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "signature"
            ],
            "type": "string",
            "description": "The field type",
            "default": "signature"
          },
          "image": {
            "title": "Image",
            "type": "string",
            "description": "The image of the signature."
          },
          "signingUserId": {
            "title": "Signinguserid",
            "type": "integer",
            "description": "The user id of the signing user."
          },
          "signingTimestamp": {
            "title": "Signingtimestamp",
            "type": "integer",
            "description": "The timestamp of the signing."
          }
        }
      },
      "ManagerFieldSignatureRequest": {
        "title": "ManagerFieldSignatureRequest",
        "required": [
          "managerFieldId",
          "image",
          "signingUserId",
          "signingTimestamp"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id"
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "signature"
            ],
            "type": "string",
            "description": "The manager field type",
            "default": "signature"
          },
          "image": {
            "title": "Image",
            "type": "string",
            "description": "The signature"
          },
          "signingUserId": {
            "title": "Signinguserid",
            "minimum": 1,
            "type": "integer",
            "description": "The signing user id"
          },
          "signingTimestamp": {
            "title": "Signingtimestamp",
            "minimum": 1,
            "type": "integer",
            "description": "The signing timestamp"
          }
        }
      },
      "ManagerFieldStatusOption": {
        "title": "ManagerFieldStatusOption",
        "required": [
          "statusOptionId",
          "name",
          "color"
        ],
        "type": "object",
        "properties": {
          "statusOptionId": {
            "title": "Statusoptionid",
            "type": "string",
            "description": "The ID of the status option."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the status option."
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The color of the status option."
          }
        }
      },
      "ManagerFieldStatusRequest": {
        "title": "ManagerFieldStatusRequest",
        "required": [
          "managerFieldId",
          "status"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id"
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "status"
            ],
            "type": "string",
            "description": "The manager field type",
            "default": "status"
          },
          "status": {
            "title": "Status",
            "allOf": [
              {
                "$ref": "#/components/schemas/ManagerFieldStatusOption"
              }
            ],
            "description": "The status"
          }
        }
      },
      "ManualBreakActivityResponse": {
        "title": "ManualBreakActivityResponse",
        "required": [
          "id",
          "start",
          "manualBreakId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the activity"
          },
          "managerNote": {
            "title": "Managernote",
            "type": "string",
            "description": "The value of the manager note"
          },
          "employeeNote": {
            "title": "Employeenote",
            "type": "string",
            "description": "The value of the employee note"
          },
          "start": {
            "title": "Start",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneResponse"
              }
            ],
            "description": "The value of the start time"
          },
          "end": {
            "title": "End",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneResponse"
              }
            ],
            "description": "The value of the end time"
          },
          "manualBreakId": {
            "title": "Manualbreakid",
            "type": "string",
            "description": "The ID of the manual break"
          }
        }
      },
      "ManualBreakResponse": {
        "title": "ManualBreakResponse",
        "required": [
          "id",
          "name",
          "isPaid",
          "duration"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the manual break"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the manual break"
          },
          "isPaid": {
            "title": "Ispaid",
            "type": "boolean",
            "description": "Whether the manual break is paid"
          },
          "duration": {
            "title": "Duration",
            "type": "integer",
            "description": "The duration of the manual break in minutes"
          }
        }
      },
      "ManualBreaksGetResponse": {
        "title": "ManualBreaksGetResponse",
        "required": [
          "manualBreaks",
          "areManualBreaksEnabled"
        ],
        "type": "object",
        "properties": {
          "manualBreaks": {
            "title": "Manualbreaks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualBreakResponse"
            },
            "description": "The manual breaks"
          },
          "areManualBreaksEnabled": {
            "title": "Aremanualbreaksenabled",
            "type": "boolean",
            "description": "Whether manual breaks are enabled"
          }
        }
      },
      "MeResponse": {
        "title": "MeResponse",
        "required": [
          "companyName"
        ],
        "type": "object",
        "properties": {
          "companyName": {
            "title": "Companyname",
            "type": "string",
            "description": "Your company's name"
          }
        }
      },
      "MultipleChoiceAnswer": {
        "title": "MultipleChoiceAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty",
          "selectedAnswers"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "multipleChoice"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "multipleChoice"
          },
          "selectedAnswers": {
            "title": "Selectedanswers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormMultipleChoiceOptionModel"
            },
            "description": "The selected answers."
          }
        }
      },
      "MultipleChoiceQuestion": {
        "title": "MultipleChoiceQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "allAnswers",
          "isMultipleSelect",
          "displaySortedAnswers"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "multipleChoice"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "allAnswers": {
            "title": "Allanswers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormMultipleChoiceOptionModel"
            },
            "description": "List of all the options, including deleted options"
          },
          "isMultipleSelect": {
            "title": "Ismultipleselect",
            "type": "boolean",
            "description": "Indication if multiple selection is enabled"
          },
          "displaySortedAnswers": {
            "title": "Displaysortedanswers",
            "type": "boolean",
            "description": "Indicates if display sorted answers is enabled"
          }
        }
      },
      "NoteManagerField": {
        "title": "NoteManagerField",
        "required": [
          "managerFieldId",
          "name",
          "mobileUsersCanSee",
          "mobileUsersNotifyWhenChanges",
          "adminsWhoCanEdit",
          "managerFieldType"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The Manager Field's ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The Manager Field's name"
          },
          "mobileUsersCanSee": {
            "title": "Mobileuserscansee",
            "type": "boolean",
            "description": "Indication if mobile users can see the Manager Field"
          },
          "mobileUsersNotifyWhenChanges": {
            "title": "Mobileusersnotifywhenchanges",
            "type": "boolean",
            "description": "Indication if mobile users will be notified if the Manager Field changes"
          },
          "adminsWhoCanEdit": {
            "title": "Adminswhocanedit",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitAdminsWhoCanEdit"
              }
            ],
            "description": " Limit the admins who can edit this manager field. Owners can always edit the manager field."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "note"
            ],
            "type": "string",
            "description": "The Manager Field's type"
          }
        }
      },
      "NumberAnswer": {
        "title": "NumberAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "number"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "number"
          },
          "inputValue": {
            "title": "Inputvalue",
            "type": "number",
            "description": "The input value."
          }
        }
      },
      "NumberQuestion": {
        "title": "NumberQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "number"
            ],
            "type": "string",
            "description": "The type of the question"
          }
        }
      },
      "OpenEndedAnswer": {
        "title": "OpenEndedAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "openEnded"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "openEnded"
          },
          "value": {
            "title": "Value",
            "type": "string",
            "description": "The input text."
          }
        }
      },
      "OpenEndedQuestion": {
        "title": "OpenEndedQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "openEnded"
            ],
            "type": "string",
            "description": "The type of the question"
          }
        }
      },
      "OwnerManagerField": {
        "title": "OwnerManagerField",
        "required": [
          "managerFieldId",
          "name",
          "mobileUsersCanSee",
          "mobileUsersNotifyWhenChanges",
          "adminsWhoCanEdit",
          "managerFieldType"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The Manager Field's ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The Manager Field's name"
          },
          "mobileUsersCanSee": {
            "title": "Mobileuserscansee",
            "type": "boolean",
            "description": "Indication if mobile users can see the Manager Field"
          },
          "mobileUsersNotifyWhenChanges": {
            "title": "Mobileusersnotifywhenchanges",
            "type": "boolean",
            "description": "Indication if mobile users will be notified if the Manager Field changes"
          },
          "adminsWhoCanEdit": {
            "title": "Adminswhocanedit",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitAdminsWhoCanEdit"
              }
            ],
            "description": " Limit the admins who can edit this manager field. Owners can always edit the manager field."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "owner"
            ],
            "type": "string",
            "description": "The Manager Field's type"
          }
        }
      },
      "PaginatedBaseResponse_CustomFieldCategoriesResponse_": {
        "title": "PaginatedBaseResponse[CustomFieldCategoriesResponse]",
        "required": [
          "data",
          "paging"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/CustomFieldCategoriesResponse"
          },
          "paging": {
            "$ref": "#/components/schemas/PagingResponseModel"
          }
        }
      },
      "PaginatedBaseResponse_FormsGetResponse_": {
        "title": "PaginatedBaseResponse[FormsGetResponse]",
        "required": [
          "data",
          "paging"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FormsGetResponse"
          },
          "paging": {
            "$ref": "#/components/schemas/PagingResponseModel"
          }
        }
      },
      "PaginatedBaseResponse_FormsSubmissionsGetResponse_": {
        "title": "PaginatedBaseResponse[FormsSubmissionsGetResponse]",
        "required": [
          "data",
          "paging"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FormsSubmissionsGetResponse"
          },
          "paging": {
            "$ref": "#/components/schemas/PagingResponseModel"
          }
        }
      },
      "PaginatedBaseResponse_GetCustomFieldsSettingsResponse_": {
        "title": "PaginatedBaseResponse[GetCustomFieldsSettingsResponse]",
        "required": [
          "data",
          "paging"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/GetCustomFieldsSettingsResponse"
          },
          "paging": {
            "$ref": "#/components/schemas/PagingResponseModel"
          }
        }
      },
      "PaginatedBaseResponse_JobsResponse_": {
        "title": "PaginatedBaseResponse[JobsResponse]",
        "required": [
          "data",
          "paging"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/JobsResponse"
          },
          "paging": {
            "$ref": "#/components/schemas/PagingResponseModel"
          }
        }
      },
      "PaginatedBaseResponse_ShiftBulkResponse_": {
        "title": "PaginatedBaseResponse[ShiftBulkResponse]",
        "required": [
          "data",
          "paging"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ShiftBulkResponse"
          },
          "paging": {
            "$ref": "#/components/schemas/PagingResponseModel"
          }
        }
      },
      "PaginatedBaseResponse_TimeOffGetUserBalancesResponse_": {
        "title": "PaginatedBaseResponse[TimeOffGetUserBalancesResponse]",
        "required": [
          "data",
          "paging"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/TimeOffGetUserBalancesResponse"
          },
          "paging": {
            "$ref": "#/components/schemas/PagingResponseModel"
          }
        }
      },
      "PaginatedBaseResponse_UsersResponse_": {
        "title": "PaginatedBaseResponse[UsersResponse]",
        "required": [
          "data",
          "paging"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "title": "Requestid",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UsersResponse"
          },
          "paging": {
            "$ref": "#/components/schemas/PagingResponseModel"
          }
        }
      },
      "PagingResponseModel": {
        "title": "PagingResponseModel",
        "required": [
          "offset"
        ],
        "type": "object",
        "properties": {
          "offset": {
            "title": "Offset",
            "minimum": 0,
            "type": "integer",
            "description": "The resource offset of the last successfully read resource will be returned as the paging.offset JSON property of a paginated response containing more results"
          }
        }
      },
      "PolicyUnitsEnum": {
        "title": "PolicyUnitsEnum",
        "enum": [
          "hours",
          "days"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "RatingAnswer": {
        "title": "RatingAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "rating"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "rating"
          },
          "ratingValue": {
            "title": "Ratingvalue",
            "type": "integer",
            "description": "The rating value."
          }
        }
      },
      "RatingQuestion": {
        "title": "RatingQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "minValue",
          "maxValue",
          "minValueText",
          "maxValueText"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "rating"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "minValue": {
            "title": "Minvalue",
            "type": "integer",
            "description": "Minimum rating value"
          },
          "maxValue": {
            "title": "Maxvalue",
            "type": "integer",
            "description": "Maximum rating value"
          },
          "minValueText": {
            "title": "Minvaluetext",
            "type": "string",
            "description": "Minimum rating value text"
          },
          "maxValueText": {
            "title": "Maxvaluetext",
            "type": "string",
            "description": "Maximum rating value text"
          }
        }
      },
      "ScannerAnswer": {
        "title": "ScannerAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty",
          "images"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "scanDocument"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "scanDocument"
          },
          "images": {
            "title": "Images",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormImageModel"
            },
            "description": "The images."
          }
        }
      },
      "ScannerQuestion": {
        "title": "ScannerQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "isMultipleImageUploadAllowed",
          "isCameraEnabled",
          "isGalleryEnabled"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "scanDocument"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "isMultipleImageUploadAllowed": {
            "title": "Ismultipleimageuploadallowed",
            "type": "boolean",
            "description": "Indicates if multiple uploads is enabled"
          },
          "isCameraEnabled": {
            "title": "Iscameraenabled",
            "type": "boolean",
            "description": "Indicates if taking a picture through camera is enabled"
          },
          "isGalleryEnabled": {
            "title": "Isgalleryenabled",
            "type": "boolean",
            "description": "Indicates if choosing a picture through gallery is enabled"
          }
        }
      },
      "SchedulerResponse": {
        "title": "SchedulerResponse",
        "required": [
          "schedulerId",
          "name",
          "isArchived",
          "timezone"
        ],
        "type": "object",
        "properties": {
          "schedulerId": {
            "title": "Schedulerid",
            "minimum": 1,
            "type": "integer",
            "description": "The unique identifier of the scheduler"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the scheduler"
          },
          "isArchived": {
            "title": "Isarchived",
            "type": "boolean",
            "description": "Indicates whether the scheduler is archived"
          },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "The timezone of the scheduler in Tz format"
          }
        }
      },
      "SchedulersResponse": {
        "title": "SchedulersResponse",
        "required": [
          "schedulers"
        ],
        "type": "object",
        "properties": {
          "schedulers": {
            "title": "Schedulers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchedulerResponse"
            },
            "description": "The schedulers"
          }
        }
      },
      "ShiftActivityResponse": {
        "title": "ShiftActivityResponse",
        "required": [
          "id",
          "start",
          "jobId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the activity"
          },
          "managerNote": {
            "title": "Managernote",
            "type": "string",
            "description": "The value of the manager note"
          },
          "employeeNote": {
            "title": "Employeenote",
            "type": "string",
            "description": "The value of the employee note"
          },
          "start": {
            "title": "Start",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneResponse"
              }
            ],
            "description": "The value of the start time"
          },
          "end": {
            "title": "End",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneResponse"
              }
            ],
            "description": "The value of the end time"
          },
          "jobId": {
            "title": "Jobid",
            "type": "string",
            "description": "The ID of the job"
          },
          "subJobId": {
            "title": "Subjobid",
            "type": "string",
            "description": "The ID of the sub job"
          },
          "shiftAttachments": {
            "title": "Shiftattachments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralActivityShiftAttachmentResponse"
            },
            "description": "The shift attachments"
          }
        }
      },
      "ShiftAttachmentDropDownListItemSettingsResponse": {
        "title": "ShiftAttachmentDropDownListItemSettingsResponse",
        "required": [
          "id",
          "name",
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the dropdown list item"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the dropdown list item"
          },
          "isEnabled": {
            "title": "Isenabled",
            "type": "boolean",
            "description": "Whether the dropdown list item is enabled"
          }
        }
      },
      "ShiftAttachmentDropDownListSettingsResponse": {
        "title": "ShiftAttachmentDropDownListSettingsResponse",
        "required": [
          "id",
          "type",
          "name",
          "isRequired",
          "isEnabled",
          "items"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the shift attachment"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShiftAttachmentType"
              }
            ],
            "description": "The type of the shift attachment"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the shift attachment"
          },
          "isRequired": {
            "title": "Isrequired",
            "type": "boolean",
            "description": "Whether the shift attachment is required"
          },
          "isEnabled": {
            "title": "Isenabled",
            "type": "boolean",
            "description": "Whether the shift attachment is enabled"
          },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftAttachmentDropDownListItemSettingsResponse"
            },
            "description": "The dropdown list items"
          }
        }
      },
      "ShiftAttachmentSettingsResponse": {
        "title": "ShiftAttachmentSettingsResponse",
        "required": [
          "id",
          "type",
          "name",
          "isRequired",
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the shift attachment"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShiftAttachmentType"
              }
            ],
            "description": "The type of the shift attachment"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the shift attachment"
          },
          "isRequired": {
            "title": "Isrequired",
            "type": "boolean",
            "description": "Whether the shift attachment is required"
          },
          "isEnabled": {
            "title": "Isenabled",
            "type": "boolean",
            "description": "Whether the shift attachment is enabled"
          }
        }
      },
      "ShiftAttachmentType": {
        "title": "ShiftAttachmentType",
        "enum": [
          "freeText",
          "dropdownList",
          "number",
          "image",
          "file",
          "signature"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ShiftAttachmentsGetResponse": {
        "title": "ShiftAttachmentsGetResponse",
        "required": [
          "shiftAttachments"
        ],
        "type": "object",
        "properties": {
          "shiftAttachments": {
            "title": "Shiftattachments",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ShiftAttachmentDropDownListSettingsResponse"
                },
                {
                  "$ref": "#/components/schemas/ShiftAttachmentSettingsResponse"
                }
              ]
            },
            "description": "The shift attachments"
          }
        }
      },
      "ShiftBreakDataApi": {
        "title": "ShiftBreakDataApi",
        "required": [
          "name",
          "type",
          "duration",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The id of the break"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the break."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShiftBreakTypeAPI"
              }
            ],
            "description": "The type of the break (paid/unpaid)"
          },
          "startTime": {
            "title": "Starttime",
            "minimum": 0,
            "type": "integer",
            "description": "The time the break starts, counted in minutes from the beginning of the day"
          },
          "duration": {
            "title": "Duration",
            "minimum": 0,
            "type": "integer",
            "description": "The time the break lasts in minutes"
          }
        }
      },
      "ShiftBreakTypeAPI": {
        "title": "ShiftBreakTypeAPI",
        "enum": [
          "paid",
          "unpaid"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ShiftBulkDeleteRequest": {
        "title": "ShiftBulkDeleteRequest",
        "required": [
          "shiftsIds"
        ],
        "type": "object",
        "properties": {
          "shiftsIds": {
            "title": "Shiftsids",
            "maxItems": 20,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The unique identifiers of the shifts to delete"
          }
        }
      },
      "ShiftBulkDeleteResponse": {
        "title": "ShiftBulkDeleteResponse",
        "required": [
          "shiftsIds"
        ],
        "type": "object",
        "properties": {
          "shiftsIds": {
            "title": "Shiftsids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IDs of the deleted shifts"
          }
        }
      },
      "ShiftBulkResponse": {
        "title": "ShiftBulkResponse",
        "required": [
          "shifts"
        ],
        "type": "object",
        "properties": {
          "shifts": {
            "title": "Shifts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftResponse"
            },
            "description": "The shifts"
          }
        }
      },
      "ShiftCreateBreakDataApi": {
        "title": "ShiftCreateBreakDataApi",
        "required": [
          "name",
          "type",
          "duration"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the break."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShiftBreakTypeAPI"
              }
            ],
            "description": "The type of the break (paid/unpaid)"
          },
          "startTime": {
            "title": "Starttime",
            "minimum": 0,
            "type": "integer",
            "description": "The time the break starts, counted in minutes from the beginning of the day"
          },
          "duration": {
            "title": "Duration",
            "minimum": 0,
            "type": "integer",
            "description": "The time the break lasts in minutes"
          }
        }
      },
      "ShiftCreateRequest": {
        "title": "ShiftCreateRequest",
        "required": [
          "startTime",
          "endTime",
          "title"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "title": "Starttime",
            "minimum": 1,
            "type": "integer",
            "description": "The start time of the shift in Unix format (in seconds)"
          },
          "endTime": {
            "title": "Endtime",
            "minimum": 1,
            "type": "integer",
            "description": "The end time of the shift in Unix format (in seconds)"
          },
          "isOpenShift": {
            "title": "Isopenshift",
            "type": "boolean",
            "description": "Indicates whether the shift is an open shift. Creates only with 1 open spot",
            "default": false
          },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "The timezone of the shift in Tz format (e.g. America/New_York). If not specified, it uses the timezone configured in the app settings"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The title of the shift"
          },
          "isPublished": {
            "title": "Ispublished",
            "type": "boolean",
            "description": "Indicates whether the shift is published",
            "default": false
          },
          "jobId": {
            "title": "Jobid",
            "type": "string",
            "description": "The ID of the associated job"
          },
          "locationData": {
            "title": "Locationdata",
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationDataAPI"
              }
            ],
            "description": "The location data for the shift"
          },
          "isRequireAdminApproval": {
            "title": "Isrequireadminapproval",
            "type": "boolean",
            "description": "Indicates whether admin approval is required for claiming the shift. Can only be set if the shift is an open shift"
          },
          "assignedUserIds": {
            "title": "Assigneduserids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "The list of assigned user IDs for the shift. If the shift is an open shift, the list must be empty",
            "default": []
          },
          "notes": {
            "title": "Notes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HTMLNoteData"
            },
            "description": "Additional notes for the shift",
            "default": []
          },
          "statuses": {
            "title": "Statuses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusDataCreate"
            },
            "description": "The list of statuses associated with the shift",
            "default": []
          },
          "breaks": {
            "title": "Breaks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftCreateBreakDataApi"
            },
            "description": "A list of breaks to create for the shift",
            "default": []
          }
        }
      },
      "ShiftDeleteResponse": {
        "title": "ShiftDeleteResponse",
        "required": [
          "shiftId"
        ],
        "type": "object",
        "properties": {
          "shiftId": {
            "title": "Shiftid",
            "type": "string",
            "description": "The ID of the deleted shift"
          }
        }
      },
      "ShiftResponse": {
        "title": "ShiftResponse",
        "required": [
          "id",
          "color",
          "startTime",
          "endTime",
          "timezone",
          "isOpenShift",
          "title",
          "isPublished"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the shift"
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The color of the shift"
          },
          "assignedUserIds": {
            "title": "Assigneduserids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "The IDs of the assigned users",
            "default": []
          },
          "startTime": {
            "title": "Starttime",
            "minimum": 1,
            "type": "integer",
            "description": "The start time of the shift"
          },
          "endTime": {
            "title": "Endtime",
            "minimum": 1,
            "type": "integer",
            "description": "The end time of the shift"
          },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "The timezone of the shift"
          },
          "isOpenShift": {
            "title": "Isopenshift",
            "type": "boolean",
            "description": "Whether the shift is an open shift"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The title of the shift"
          },
          "jobId": {
            "title": "Jobid",
            "type": "string",
            "description": "The ID of the job"
          },
          "locationData": {
            "title": "Locationdata",
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationDataAPI"
              }
            ],
            "description": "The location data"
          },
          "isPublished": {
            "title": "Ispublished",
            "type": "boolean",
            "description": "Whether the shift is published"
          },
          "isRequireAdminApproval": {
            "title": "Isrequireadminapproval",
            "type": "boolean",
            "description": "Whether the shift requires admin approval"
          },
          "updateTime": {
            "title": "Updatetime",
            "minimum": 1,
            "type": "integer",
            "description": "The update time of the shift"
          },
          "creationTime": {
            "title": "Creationtime",
            "minimum": 1,
            "type": "integer",
            "description": "The creation time of the shift"
          },
          "openSpots": {
            "title": "Openspots",
            "type": "integer",
            "description": "The number of open spots"
          },
          "notes": {
            "title": "Notes",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/HTMLNoteDataOut"
                },
                {
                  "$ref": "#/components/schemas/AlbumNoteDataOut"
                },
                {
                  "$ref": "#/components/schemas/FileNoteDataOut"
                }
              ]
            },
            "description": "The notes of the shift",
            "default": []
          },
          "statuses": {
            "title": "Statuses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusData"
            },
            "description": "The statuses of the shift",
            "default": []
          },
          "breaks": {
            "title": "Breaks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftBreakDataApi"
            },
            "description": "The breaks of the shift",
            "default": []
          }
        }
      },
      "ShiftUpdateBreakDataApi": {
        "title": "ShiftUpdateBreakDataApi",
        "required": [
          "name",
          "type",
          "duration"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the break. If this field is left empty, a new break will be created"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the break."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShiftBreakTypeAPI"
              }
            ],
            "description": "The type of the break (paid/unpaid)"
          },
          "startTime": {
            "title": "Starttime",
            "minimum": 0,
            "type": "integer",
            "description": "The time the break starts, counted in minutes from the beginning of the day"
          },
          "duration": {
            "title": "Duration",
            "minimum": 0,
            "type": "integer",
            "description": "The time the break lasts in minutes"
          }
        }
      },
      "ShiftUpdateRequest": {
        "title": "ShiftUpdateRequest",
        "required": [
          "shiftId"
        ],
        "type": "object",
        "properties": {
          "shiftId": {
            "title": "Shiftid",
            "type": "string",
            "description": "The unique identifier of the shift"
          },
          "startTime": {
            "title": "Starttime",
            "minimum": 1,
            "type": "integer",
            "description": "The start time of the shift in Unix format (in seconds)"
          },
          "endTime": {
            "title": "Endtime",
            "minimum": 1,
            "type": "integer",
            "description": "The end time of the shift in Unix format (in seconds)"
          },
          "isOpenShift": {
            "title": "Isopenshift",
            "type": "boolean",
            "description": "Indicates whether the shift is an open shift. Creates only with 1 open spot"
          },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "The timezone in Tz format (e.g. America/New_York)"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The title of the shift"
          },
          "isPublished": {
            "title": "Ispublished",
            "type": "boolean",
            "description": "Indicates whether the shift is published"
          },
          "jobId": {
            "title": "Jobid",
            "type": "string",
            "description": "The ID of the associated job"
          },
          "locationData": {
            "title": "Locationdata",
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationDataAPI"
              }
            ],
            "description": "The location data for the shift"
          },
          "isRequireAdminApproval": {
            "title": "Isrequireadminapproval",
            "type": "boolean",
            "description": "Indicates whether admin approval is required for the shift. Can only be set if the shift is an open shift"
          },
          "assignedUserIds": {
            "title": "Assigneduserids",
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer"
            },
            "description": "The list of assigned user IDs for the shift"
          },
          "notes": {
            "title": "Notes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HTMLNoteData"
            },
            "description": "Additional notes for the shift"
          },
          "breaks": {
            "title": "Breaks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftUpdateBreakDataApi"
            },
            "description": "The list of breaks for the shift"
          },
          "isEditForAllUsers": {
            "title": "Iseditforallusers",
            "type": "boolean",
            "description": "Indicates whether the update should be applied to all users assigned to the shift",
            "default": false
          }
        }
      },
      "ShiftsSortKeysExternal": {
        "title": "ShiftsSortKeysExternal",
        "enum": [
          "created_at",
          "updated_at"
        ],
        "description": "An enumeration."
      },
      "SignatureAnswer": {
        "title": "SignatureAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty",
          "images"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "signature"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "signature"
          },
          "images": {
            "title": "Images",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormImageModel"
            },
            "description": "The images."
          }
        }
      },
      "SignatureManagerField": {
        "title": "SignatureManagerField",
        "required": [
          "managerFieldId",
          "name",
          "mobileUsersCanSee",
          "mobileUsersNotifyWhenChanges",
          "adminsWhoCanEdit",
          "managerFieldType"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The Manager Field's ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The Manager Field's name"
          },
          "mobileUsersCanSee": {
            "title": "Mobileuserscansee",
            "type": "boolean",
            "description": "Indication if mobile users can see the Manager Field"
          },
          "mobileUsersNotifyWhenChanges": {
            "title": "Mobileusersnotifywhenchanges",
            "type": "boolean",
            "description": "Indication if mobile users will be notified if the Manager Field changes"
          },
          "adminsWhoCanEdit": {
            "title": "Adminswhocanedit",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitAdminsWhoCanEdit"
              }
            ],
            "description": " Limit the admins who can edit this manager field. Owners can always edit the manager field."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "signature"
            ],
            "type": "string",
            "description": "The Manager Field's type"
          }
        }
      },
      "SignatureQuestion": {
        "title": "SignatureQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "signature"
            ],
            "type": "string",
            "description": "The type of the question"
          }
        }
      },
      "SingleAbsence": {
        "title": "SingleAbsence",
        "required": [
          "type",
          "startTime",
          "endTime",
          "note"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AbsenceType"
              }
            ],
            "description": "The type of the unavailability"
          },
          "startTime": {
            "title": "Starttime",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezone"
              }
            ],
            "description": "The start time of the unavailability"
          },
          "endTime": {
            "title": "Endtime",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezone"
              }
            ],
            "description": "The end time of the unavailability"
          },
          "note": {
            "title": "Note",
            "type": "string",
            "description": "The note of the unavailability"
          },
          "policyName": {
            "title": "Policyname",
            "type": "string",
            "description": "The name of the policy (applicable only when unavailability type is timeOff)"
          }
        }
      },
      "SingleShift": {
        "title": "SingleShift",
        "required": [
          "startTime",
          "endTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "title": "Starttime",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezone"
              }
            ],
            "description": "The start time of the shift"
          },
          "endTime": {
            "title": "Endtime",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezone"
              }
            ],
            "description": "The end time of the shift"
          }
        }
      },
      "SliderAnswer": {
        "title": "SliderAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "slider"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "slider"
          },
          "value": {
            "title": "Value",
            "type": "integer",
            "description": "The value of the slider."
          }
        }
      },
      "SliderQuestion": {
        "title": "SliderQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "minValue",
          "maxValue"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "slider"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "minValue": {
            "title": "Minvalue",
            "type": "integer",
            "description": "Minimum value in slider"
          },
          "maxValue": {
            "title": "Maxvalue",
            "type": "integer",
            "description": "Maximum value in slider"
          }
        }
      },
      "SortOrder": {
        "title": "SortOrder",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StatusData": {
        "title": "StatusData",
        "required": [
          "statusId",
          "status",
          "creationTime",
          "creatingUserId"
        ],
        "type": "object",
        "properties": {
          "statusId": {
            "title": "Statusid",
            "type": "string",
            "description": "The ID of the status"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusTypesAPI"
              }
            ],
            "description": "The status of the shift, valid values:\naccepted, checked_in, completed, rejected, claimed, claim_requested, unclaimed, unclaim_requested, cancel_claim_request, reset"
          },
          "note": {
            "title": "Note",
            "type": "string",
            "description": "The note of the status"
          },
          "attachments": {
            "title": "Attachments",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The attachments of the status"
          },
          "creationTime": {
            "title": "Creationtime",
            "type": "integer",
            "description": "The creation time of the status"
          },
          "updateTime": {
            "title": "Updatetime",
            "type": "integer",
            "description": "The update time of the status"
          },
          "creatingUserId": {
            "title": "Creatinguserid",
            "type": "integer",
            "description": "The ID of the user who created the status"
          },
          "modifyingUserId": {
            "title": "Modifyinguserid",
            "type": "integer",
            "description": "The ID of the user who modified the status"
          },
          "gps": {
            "title": "Gps",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The GPS data of the status"
          }
        }
      },
      "StatusDataCreate": {
        "title": "StatusDataCreate",
        "type": "object",
        "properties": {
          "note": {
            "title": "Note",
            "type": "string",
            "description": "The note of the status"
          },
          "gps": {
            "title": "Gps",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The GPS data of the status"
          },
          "shouldOverridePreviousStatuses": {
            "title": "Shouldoverridepreviousstatuses",
            "type": "boolean",
            "description": "Indicates whether to override previous statuses",
            "default": true
          }
        }
      },
      "StatusManagerField": {
        "title": "StatusManagerField",
        "required": [
          "managerFieldId",
          "name",
          "mobileUsersCanSee",
          "mobileUsersNotifyWhenChanges",
          "adminsWhoCanEdit",
          "managerFieldType",
          "statuses"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The Manager Field's ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The Manager Field's name"
          },
          "mobileUsersCanSee": {
            "title": "Mobileuserscansee",
            "type": "boolean",
            "description": "Indication if mobile users can see the Manager Field"
          },
          "mobileUsersNotifyWhenChanges": {
            "title": "Mobileusersnotifywhenchanges",
            "type": "boolean",
            "description": "Indication if mobile users will be notified if the Manager Field changes"
          },
          "adminsWhoCanEdit": {
            "title": "Adminswhocanedit",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitAdminsWhoCanEdit"
              }
            ],
            "description": " Limit the admins who can edit this manager field. Owners can always edit the manager field."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "status"
            ],
            "type": "string",
            "description": "The Manager Field's type"
          },
          "statuses": {
            "title": "Statuses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v2__features__workflow__external_api__v1__models__forms_models__ManagerFieldStatus"
            },
            "description": "List of Manager Field's possible statuses"
          }
        }
      },
      "StatusTypesAPI": {
        "title": "StatusTypesAPI",
        "enum": [
          "accepted",
          "checked_in",
          "completed",
          "rejected",
          "claimed",
          "claim_requested",
          "unclaimed",
          "unclaim_requested",
          "cancel_claim_request",
          "reset"
        ],
        "description": "An enumeration."
      },
      "SubJobCreateRequest": {
        "title": "SubJobCreateRequest",
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The title of the job"
          },
          "code": {
            "title": "Code",
            "type": "string",
            "description": "The code of the job",
            "default": ""
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The description of the job",
            "default": ""
          },
          "gps": {
            "title": "Gps",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The GPS data of the job"
          },
          "assign": {
            "title": "Assign",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssignDataIn"
              }
            ],
            "description": "Data related to job assignment"
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The color associated with the job",
            "default": "#2D2D2D"
          },
          "parentId": {
            "title": "Parentid",
            "type": "string",
            "description": "The ID of the parent job, if any"
          },
          "useParentData": {
            "title": "Useparentdata",
            "type": "boolean",
            "description": "Indicates whether to use the parent job's data or not",
            "default": true
          }
        }
      },
      "TaskAnswer": {
        "title": "TaskAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty",
          "isChecked"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "task"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "task"
          },
          "isChecked": {
            "title": "Ischecked",
            "type": "boolean",
            "description": "Whether the task is checked"
          }
        }
      },
      "TaskQuestion": {
        "title": "TaskQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "task"
            ],
            "type": "string",
            "description": "The type of the question"
          }
        }
      },
      "TimeActivitiesCreateRequestList": {
        "title": "TimeActivitiesCreateRequestList",
        "required": [
          "timeActivities"
        ],
        "type": "object",
        "properties": {
          "timeActivities": {
            "title": "Timeactivities",
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTimeActivitiesCreateRequest"
            },
            "description": "List of the time activities of the users"
          }
        }
      },
      "TimeActivitiesCreateResponse": {
        "title": "TimeActivitiesCreateResponse",
        "required": [
          "timeActivitiesByUsers"
        ],
        "type": "object",
        "properties": {
          "timeActivitiesByUsers": {
            "title": "Timeactivitiesbyusers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTimeActivity"
            },
            "description": "The time activities"
          }
        }
      },
      "TimeActivitiesGetResponse": {
        "title": "TimeActivitiesGetResponse",
        "required": [
          "timeActivitiesByUsers"
        ],
        "type": "object",
        "properties": {
          "timeActivitiesByUsers": {
            "title": "Timeactivitiesbyusers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTimeActivity"
            },
            "description": "The time activities"
          }
        }
      },
      "TimeActivitiesUpdateRequestList": {
        "title": "TimeActivitiesUpdateRequestList",
        "required": [
          "timeActivities"
        ],
        "type": "object",
        "properties": {
          "timeActivities": {
            "title": "Timeactivities",
            "maxItems": 100,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTimeActivitiesUpdateRequest"
            },
            "description": "List of time activities of the users"
          }
        }
      },
      "TimeActivitiesUpdateResponse": {
        "title": "TimeActivitiesUpdateResponse",
        "required": [
          "timeActivitiesByUsers"
        ],
        "type": "object",
        "properties": {
          "timeActivitiesByUsers": {
            "title": "Timeactivitiesbyusers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTimeActivity"
            },
            "description": "The time activities"
          }
        }
      },
      "TimeActivityAPIType": {
        "title": "TimeActivityAPIType",
        "enum": [
          "shift",
          "manual_break",
          "time_off"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TimeActivityManualBreakCreateRequest": {
        "title": "TimeActivityManualBreakCreateRequest",
        "required": [
          "start",
          "end",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the manual break"
          },
          "start": {
            "title": "Start",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneRequest"
              }
            ],
            "description": "The start time"
          },
          "end": {
            "title": "End",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneRequest"
              }
            ],
            "description": "The end time"
          },
          "employeeNote": {
            "title": "Employeenote",
            "type": "string",
            "description": "Employee note providing additional details"
          },
          "managerNote": {
            "title": "Managernote",
            "type": "string",
            "description": "Manager note providing additional details"
          }
        }
      },
      "TimeActivityManualBreakUpdateRequest": {
        "title": "TimeActivityManualBreakUpdateRequest",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the time activity associated with the time clock"
          },
          "start": {
            "title": "Start",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneRequest"
              }
            ],
            "description": "The start time of the time activity"
          },
          "end": {
            "title": "End",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneRequest"
              }
            ],
            "description": "The end time of the time activity"
          },
          "employeeNote": {
            "title": "Employeenote",
            "type": "string",
            "description": "Employee note providing additional details"
          },
          "managerNote": {
            "title": "Managernote",
            "type": "string",
            "description": "Manager note providing additional details"
          },
          "manualBreakId": {
            "title": "Manualbreakid",
            "type": "string",
            "description": "The manual break ID to associate with the break"
          }
        }
      },
      "TimeActivityShiftCreateRequest": {
        "title": "TimeActivityShiftCreateRequest",
        "required": [
          "start",
          "end",
          "jobId"
        ],
        "type": "object",
        "properties": {
          "start": {
            "title": "Start",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneRequest"
              }
            ],
            "description": "The start time"
          },
          "end": {
            "title": "End",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneRequest"
              }
            ],
            "description": "The end time"
          },
          "employeeNote": {
            "title": "Employeenote",
            "type": "string",
            "description": "Employee note providing additional details"
          },
          "managerNote": {
            "title": "Managernote",
            "type": "string",
            "description": "Manager note providing additional details"
          },
          "jobId": {
            "title": "Jobid",
            "type": "string",
            "description": "The job ID of the shift"
          },
          "subJobId": {
            "title": "Subjobid",
            "type": "string",
            "description": "The sub job ID of the shift. Required if sub jobs are defined under the specific job"
          }
        }
      },
      "TimeActivityShiftUpdateRequest": {
        "title": "TimeActivityShiftUpdateRequest",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the time activity associated with the time clock"
          },
          "start": {
            "title": "Start",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneRequest"
              }
            ],
            "description": "The start time of the time activity"
          },
          "end": {
            "title": "End",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneRequest"
              }
            ],
            "description": "The end time of the time activity"
          },
          "employeeNote": {
            "title": "Employeenote",
            "type": "string",
            "description": "Employee note providing additional details"
          },
          "managerNote": {
            "title": "Managernote",
            "type": "string",
            "description": "Manager note providing additional details"
          },
          "jobId": {
            "title": "Jobid",
            "type": "string",
            "description": "The job ID to associate with the shift (if the shift remains under the same job leave it empty)"
          },
          "subJobId": {
            "title": "Subjobid",
            "type": "string",
            "description": "The sub-job ID to associate with the job (if the sub-job remains under the same parent job update only the sub-job ID)"
          }
        }
      },
      "TimeClock": {
        "title": "TimeClock",
        "required": [
          "id",
          "name",
          "isArchived"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "minimum": 1,
            "type": "integer",
            "description": "The ID of the time clock"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the time clock"
          },
          "isArchived": {
            "title": "Isarchived",
            "type": "boolean",
            "description": "Whether the time clock is archived"
          }
        }
      },
      "TimeClocksResponse": {
        "title": "TimeClocksResponse",
        "required": [
          "timeClocks"
        ],
        "type": "object",
        "properties": {
          "timeClocks": {
            "title": "Timeclocks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeClock"
            },
            "description": "The time clocks"
          }
        }
      },
      "TimeOffActivityDurationUnits": {
        "title": "TimeOffActivityDurationUnits",
        "enum": [
          "hours",
          "days"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TimeOffActivityResponse": {
        "title": "TimeOffActivityResponse",
        "required": [
          "id",
          "start",
          "policyTypeId",
          "duration",
          "isAllDay"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The ID of the activity"
          },
          "managerNote": {
            "title": "Managernote",
            "type": "string",
            "description": "The value of the manager note"
          },
          "employeeNote": {
            "title": "Employeenote",
            "type": "string",
            "description": "The value of the employee note"
          },
          "start": {
            "title": "Start",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneResponse"
              }
            ],
            "description": "The value of the start time"
          },
          "end": {
            "title": "End",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimestampWithTimezoneResponse"
              }
            ],
            "description": "The value of the end time"
          },
          "policyTypeId": {
            "title": "Policytypeid",
            "type": "string",
            "description": "The ID of the policy type"
          },
          "duration": {
            "title": "Duration",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeOffDurationResponse"
              }
            ],
            "description": "The duration of the time off"
          },
          "isAllDay": {
            "title": "Isallday",
            "type": "boolean",
            "description": "Indicates whether the time off is all day"
          }
        }
      },
      "TimeOffDurationResponse": {
        "title": "TimeOffDurationResponse",
        "required": [
          "value",
          "units"
        ],
        "type": "object",
        "properties": {
          "value": {
            "title": "Value",
            "type": "number",
            "description": "The value of the duration"
          },
          "units": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeOffActivityDurationUnits"
              }
            ],
            "description": "The units of the time off in the chosen unit (hours/days)"
          }
        }
      },
      "TimeOffGetPolicyTypesResponse": {
        "title": "TimeOffGetPolicyTypesResponse",
        "required": [
          "policyTypes"
        ],
        "type": "object",
        "properties": {
          "policyTypes": {
            "title": "Policytypes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeOffPolicyType"
            },
            "description": "List of the company policy types"
          }
        }
      },
      "TimeOffGetUserBalancesResponse": {
        "title": "TimeOffGetUserBalancesResponse",
        "required": [
          "balances"
        ],
        "type": "object",
        "properties": {
          "balances": {
            "title": "Balances",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeOffUserBalance"
            },
            "description": "List of user balances of the policy type"
          }
        }
      },
      "TimeOffPolicyType": {
        "title": "TimeOffPolicyType",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The policy type id"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The policy type name"
          }
        }
      },
      "TimeOffPutUserBalanceResponse": {
        "title": "TimeOffPutUserBalanceResponse",
        "required": [
          "balance"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "title": "Balance",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeOffUserBalance"
              }
            ],
            "description": "The updated user balance"
          }
        }
      },
      "TimeOffUpdateUserBalanceRequest": {
        "title": "TimeOffUpdateUserBalanceRequest",
        "required": [
          "balance"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "title": "Balance",
            "type": "number",
            "description": "The balance to update to"
          }
        }
      },
      "TimeOffUserBalance": {
        "title": "TimeOffUserBalance",
        "required": [
          "userId",
          "units",
          "balance"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "Userid",
            "type": "integer",
            "description": "The user id"
          },
          "units": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyUnitsEnum"
              }
            ],
            "description": "The user balance units"
          },
          "balance": {
            "title": "Balance",
            "type": "number",
            "description": "The remaining user balance"
          }
        }
      },
      "TimestampWithTimezone": {
        "title": "TimestampWithTimezone",
        "required": [
          "timestamp",
          "timezone"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "minimum": 1,
            "type": "integer",
            "description": "The timestamp in Unix format (in seconds)"
          },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "The timezone in Tz format (e.g. America/New_York)"
          }
        }
      },
      "TimestampWithTimezoneRequest": {
        "title": "TimestampWithTimezoneRequest",
        "required": [
          "timestamp",
          "timezone"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "minimum": 1,
            "type": "integer",
            "description": "The timestamp in Unix format (in seconds)"
          },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "The timezone in Tz format (e.g. America/New_York)"
          }
        }
      },
      "TimestampWithTimezoneResponse": {
        "title": "TimestampWithTimezoneResponse",
        "required": [
          "timestamp",
          "timezone"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "minimum": 1,
            "type": "integer",
            "description": "The timestamp"
          },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "The timezone"
          }
        }
      },
      "User": {
        "title": "User",
        "required": [
          "firstName",
          "lastName",
          "phoneNumber",
          "userType",
          "userId"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "title": "Firstname",
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string",
            "description": "The user's last name"
          },
          "phoneNumber": {
            "title": "Phonenumber",
            "type": "string",
            "description": "The user's phone number"
          },
          "userType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserType"
              }
            ],
            "description": "The user's type (user, manager, owner)"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "The user's email (mandatory for managers and owners)"
          },
          "customFields": {
            "title": "Customfields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldResponse"
            },
            "description": "The user's custom fields",
            "default": []
          },
          "isArchived": {
            "title": "Isarchived",
            "type": "boolean",
            "description": "The user's archived status",
            "default": false
          },
          "userId": {
            "title": "Userid",
            "minimum": 1,
            "type": "integer",
            "description": "The user's unique id"
          }
        }
      },
      "UserCreateRequest": {
        "title": "UserCreateRequest",
        "required": [
          "firstName",
          "lastName",
          "phoneNumber",
          "userType"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "title": "Firstname",
            "maxLength": 100,
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "title": "Lastname",
            "maxLength": 100,
            "type": "string",
            "description": "The user's last name"
          },
          "phoneNumber": {
            "title": "Phonenumber",
            "type": "string",
            "description": "The user's phone number"
          },
          "userType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserType"
              }
            ],
            "description": "The user's type (user, manager, owner)"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "The user's email (mandatory for managers and owners)"
          },
          "customFields": {
            "title": "Customfields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseCustomField"
            },
            "description": "The user's custom fields",
            "default": []
          },
          "isArchived": {
            "title": "Isarchived",
            "type": "boolean",
            "description": "The user's archived status",
            "default": false
          }
        }
      },
      "UserCustomFields": {
        "title": "UserCustomFields",
        "enum": [
          "email",
          "date",
          "phone",
          "number",
          "str",
          "dropdown",
          "file",
          "directManager",
          "birthday"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "UserEditRequest": {
        "title": "UserEditRequest",
        "type": "object",
        "properties": {
          "firstName": {
            "title": "Firstname",
            "maxLength": 100,
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "title": "Lastname",
            "maxLength": 100,
            "type": "string",
            "description": "The user's last name"
          },
          "phoneNumber": {
            "title": "Phonenumber",
            "type": "string",
            "description": "The user's phone number"
          },
          "userType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserType"
              }
            ],
            "description": "The user's type (user, manager, owner)"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "The user's email (mandatory for managers and owners)"
          },
          "customFields": {
            "title": "Customfields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseCustomField"
            },
            "description": "The user's custom fields",
            "default": []
          },
          "isArchived": {
            "title": "Isarchived",
            "type": "boolean",
            "description": "The user's archived status",
            "default": false
          },
          "userId": {
            "title": "Userid",
            "minimum": 1,
            "type": "integer",
            "description": "The user's unique id"
          }
        }
      },
      "UserStatus": {
        "title": "UserStatus",
        "enum": [
          "active",
          "archived",
          "all"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "UserTimeActivitiesCreateRequest": {
        "title": "UserTimeActivitiesCreateRequest",
        "required": [
          "userId",
          "shifts",
          "manualbreaks"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "Userid",
            "minimum": 1,
            "type": "integer",
            "description": "The user ID of the time activity"
          },
          "shifts": {
            "title": "Shifts",
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeActivityShiftCreateRequest"
            },
            "description": "The new shifts"
          },
          "manualbreaks": {
            "title": "Manualbreaks",
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeActivityManualBreakCreateRequest"
            },
            "description": "The new manual breaks"
          }
        }
      },
      "UserTimeActivitiesUpdateRequest": {
        "title": "UserTimeActivitiesUpdateRequest",
        "required": [
          "userId",
          "shifts",
          "manualbreaks"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "Userid",
            "minimum": 1,
            "type": "integer",
            "description": "The user ID of the time activity"
          },
          "shifts": {
            "title": "Shifts",
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeActivityShiftUpdateRequest"
            },
            "description": "The shifts to update"
          },
          "manualbreaks": {
            "title": "Manualbreaks",
            "maxItems": 50,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeActivityManualBreakUpdateRequest"
            },
            "description": "The breaks to update"
          }
        }
      },
      "UserTimeActivity": {
        "title": "UserTimeActivity",
        "required": [
          "userId",
          "shifts",
          "manualBreaks"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "Userid",
            "minimum": 1,
            "type": "integer",
            "description": "The ID of the user"
          },
          "shifts": {
            "title": "Shifts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShiftActivityResponse"
            },
            "description": "The shifts"
          },
          "manualBreaks": {
            "title": "Manualbreaks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManualBreakActivityResponse"
            },
            "description": "The manual breaks"
          },
          "timeOffs": {
            "title": "Timeoffs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeOffActivityResponse"
            },
            "description": "The time offs"
          }
        }
      },
      "UserType": {
        "title": "UserType",
        "enum": [
          "user",
          "manager",
          "owner"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "UserUnavailabilityItem": {
        "title": "UserUnavailabilityItem",
        "required": [
          "userId",
          "unavailabilities",
          "shifts"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "title": "Userid",
            "type": "integer",
            "description": "The unique identifier of the user"
          },
          "unavailabilities": {
            "title": "Unavailabilities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SingleAbsence"
            },
            "description": "List of approved unavailabilities"
          },
          "shifts": {
            "title": "Shifts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SingleShift"
            },
            "description": "List of assigned shifts"
          }
        }
      },
      "UsersResponse": {
        "title": "UsersResponse",
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "title": "Users",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The users."
          }
        }
      },
      "UsersSortKeysExternal": {
        "title": "UsersSortKeysExternal",
        "enum": [
          "created_at"
        ],
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "YesNoAnswer": {
        "title": "YesNoAnswer",
        "required": [
          "questionId",
          "wasSubmittedEmpty"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The questions id."
          },
          "submissionTimestamp": {
            "title": "Submissiontimestamp",
            "type": "integer",
            "description": "The timestamp of the submission."
          },
          "location": {
            "title": "Location",
            "allOf": [
              {
                "$ref": "#/components/schemas/GpsData"
              }
            ],
            "description": "The location of the submission."
          },
          "updateTimestamp": {
            "title": "Updatetimestamp",
            "type": "integer",
            "description": "The timestamp of the last update."
          },
          "updateUserId": {
            "title": "Updateuserid",
            "type": "integer",
            "description": "The user id of the last update."
          },
          "wasSubmittedEmpty": {
            "title": "Wassubmittedempty",
            "type": "boolean",
            "description": "Whether the submission was empty."
          },
          "wasHidden": {
            "title": "Washidden",
            "type": "boolean",
            "description": "Whether the submission was hidden (by a condition)."
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "yesNo"
            ],
            "type": "string",
            "description": "The questions type",
            "default": "yesNo"
          },
          "selectedIndex": {
            "title": "Selectedindex",
            "type": "integer",
            "description": "The selected index."
          }
        }
      },
      "YesNoQuestion": {
        "title": "YesNoQuestion",
        "required": [
          "questionId",
          "title",
          "description",
          "locationRequired",
          "submissionRequired",
          "questionType",
          "allAnswers"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "title": "Questionid",
            "type": "string",
            "description": "The question's ID"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "The question's title"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The question's description"
          },
          "locationRequired": {
            "title": "Locationrequired",
            "type": "boolean",
            "description": "Indication if the gps location is required or not"
          },
          "submissionRequired": {
            "title": "Submissionrequired",
            "type": "boolean",
            "description": "Indication if this question needs to be filled to be able to submit the form"
          },
          "questionType": {
            "title": "Questiontype",
            "enum": [
              "yesNo"
            ],
            "type": "string",
            "description": "The type of the question"
          },
          "allAnswers": {
            "title": "Allanswers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormYesNoOptionModel"
            },
            "description": "Lise of the answer options"
          }
        }
      },
      "v2__features__workflow__external_api__v1__form_submissions__models__response__form_submission_response_model__ManagerFieldStatus": {
        "title": "ManagerFieldStatus",
        "required": [
          "managerFieldId"
        ],
        "type": "object",
        "properties": {
          "managerFieldId": {
            "title": "Managerfieldid",
            "type": "string",
            "description": "The manager field id."
          },
          "managerFieldType": {
            "title": "Managerfieldtype",
            "enum": [
              "status"
            ],
            "type": "string",
            "description": "The field type",
            "default": "status"
          },
          "status": {
            "title": "Status",
            "allOf": [
              {
                "$ref": "#/components/schemas/ManagerFieldStatusOption"
              }
            ],
            "description": "The status of the field."
          }
        }
      },
      "v2__features__workflow__external_api__v1__models__forms_models__ManagerFieldStatus": {
        "title": "ManagerFieldStatus",
        "required": [
          "managerFieldStatusId",
          "name",
          "color"
        ],
        "type": "object",
        "properties": {
          "managerFieldStatusId": {
            "title": "Managerfieldstatusid",
            "type": "string",
            "description": "The Manager Field's status ID"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The Manager Field's status"
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The status's background color"
          }
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "description": "The Api key of the company given by Connecteam",
        "in": "header",
        "name": "X-API-KEY"
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true
  }
}